<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MrZigZag</title>
  <subtitle>DON&#39;T PANIC!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-15T08:24:18.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李松江</name>
    <email>lisongjiang@pku.edu.cn</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>离散二维点集的热度图生成</title>
    <link href="http://yoursite.com/2016/04/15/%E7%A6%BB%E6%95%A3%E4%BA%8C%E7%BB%B4%E7%82%B9%E9%9B%86%E7%9A%84%E7%83%AD%E5%BA%A6%E5%9B%BE%E7%94%9F%E6%88%90/"/>
    <id>http://yoursite.com/2016/04/15/离散二维点集的热度图生成/</id>
    <published>2016-04-15T08:15:37.000Z</published>
    <updated>2016-04-15T08:24:18.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在处理一些二维注视点，需要直接将离散的二维注视点转换成概率分布，基本原理是用&lt;code&gt;Gaussian&lt;/code&gt;函数进行卷积生成连续的概率分布。处理这个之前顺便做了一个简单的可视化，利用涂色原理生成热度图并涂上彩虹色。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HeatMap.hpp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; HeatMap_hpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; HeatMap_hpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;opencv2/opencv.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cv::&lt;span class=&quot;function&quot;&gt;Vec3b &lt;span class=&quot;title&quot;&gt;getRainbowColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; gray, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; black_base = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;paintMap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cv::Mat_&amp;lt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;&amp;gt; &amp;amp;img, cv::Point p, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; radius, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; base = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cv::Mat_&amp;lt;uchar&amp;gt; generateHeatMapGray(cv::Mat_&amp;lt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;&amp;gt; &amp;amp;raw_map);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cv::Mat_&amp;lt;cv::Vec3b&amp;gt; generateHeatMapColor(cv::Mat_&amp;lt;uchar&amp;gt; &amp;amp;heat_map_gray, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; black_base = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cv::Mat_&amp;lt;cv::Vec3b&amp;gt; generateHeatMapColor(cv::Mat_&amp;lt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;&amp;gt; &amp;amp;raw_map, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; black_base = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* HeatMap_hpp */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;HeatMap.cpp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  RainbowColor.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  TheEyeTribeTest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Created by Li Songjiang on 4/14/16.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Copyright © 2016 PKUCV. All rights reserved.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;HeatMap.hpp&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getDistance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cv::Point p1, cv::Point p2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; ret = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret = &lt;span class=&quot;built_in&quot;&gt;sqrt&lt;/span&gt;((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cv::&lt;span class=&quot;function&quot;&gt;Vec3b &lt;span class=&quot;title&quot;&gt;getRainbowColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; gray, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; black_base)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gray &amp;lt;= &lt;span class=&quot;number&quot;&gt;51&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cv::Vec3b(black_base ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, gray * &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gray &amp;lt;= &lt;span class=&quot;number&quot;&gt;102&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gray -= &lt;span class=&quot;number&quot;&gt;51&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cv::Vec3b(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt; - gray * &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gray &amp;lt;= &lt;span class=&quot;number&quot;&gt;153&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gray -= &lt;span class=&quot;number&quot;&gt;102&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cv::Vec3b(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, gray * &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gray &amp;lt;= &lt;span class=&quot;number&quot;&gt;204&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gray -= &lt;span class=&quot;number&quot;&gt;153&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cv::Vec3b(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt; - uchar(&lt;span class=&quot;number&quot;&gt;128.0&lt;/span&gt; * gray / &lt;span class=&quot;number&quot;&gt;51.0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gray -= &lt;span class=&quot;number&quot;&gt;204&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cv::Vec3b(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;127&lt;/span&gt; - uchar(&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt; * gray / &lt;span class=&quot;number&quot;&gt;51.0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;paintMap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cv::Mat_&amp;lt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;&amp;gt; &amp;amp;img, cv::Point p, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; radius, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; base)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; dist;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i_min, i_max, j_min, j_max;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i_min = p.x - radius &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : p.x - radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i_max = p.x + radius &amp;gt; img.rows ? img.rows : p.x + radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    j_min = p.y - radius &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : p.y - radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    j_max = p.y + radius &amp;gt; img.cols ? img.cols : p.y + radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i =i_min; i &amp;lt; i_max; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j =j_min; j &amp;lt; j_max; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dist = getDistance(p, cv::Point(i, j));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dist &amp;gt; radius) &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            img.at&amp;lt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;&amp;gt;(i, j) += radius - dist + base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cv::Mat_&amp;lt;uchar&amp;gt; generateHeatMapGray(cv::Mat_&amp;lt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;&amp;gt; &amp;amp;raw_map) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cv::Mat_&amp;lt;uchar&amp;gt; heat_map_gray(raw_map.rows, raw_map.cols);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; min_value = &lt;span class=&quot;number&quot;&gt;100000000.0&lt;/span&gt;, max_value = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; raw_map.rows; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; raw_map.cols; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (raw_map.at&amp;lt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;&amp;gt;(i, j) &amp;gt; max_value) max_value = raw_map.at&amp;lt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;&amp;gt;(i, j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (raw_map.at&amp;lt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;&amp;gt;(i, j) &amp;lt; min_value) min_value = raw_map.at&amp;lt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;&amp;gt;(i, j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    delta = max_value - min_value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; heat_map_gray.rows; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; heat_map_gray.cols; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            heat_map_gray.at&amp;lt;uchar&amp;gt;(i, j) = &lt;span class=&quot;number&quot;&gt;255.0&lt;/span&gt; * (raw_map.at&amp;lt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;&amp;gt;(i, j) - min_value) / delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; heat_map_gray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cv::Mat_&amp;lt;cv::Vec3b&amp;gt; generateHeatMapColor(cv::Mat_&amp;lt;uchar&amp;gt; &amp;amp;heat_map_gray, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; black_base) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cv::Mat_&amp;lt;cv::Vec3b&amp;gt; heat_map_color(heat_map_gray.rows, heat_map_gray.cols);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; heat_map_gray.rows; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; heat_map_gray.cols; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            heat_map_color.at&amp;lt;cv::Vec3b&amp;gt;(i, j) = getRainbowColor(heat_map_gray.at&amp;lt;uchar&amp;gt;(i, j), black_base);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; heat_map_color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cv::Mat_&amp;lt;cv::Vec3b&amp;gt; generateHeatMapColor(cv::Mat_&amp;lt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;&amp;gt; &amp;amp;raw_map, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; black_base) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cv::Mat_&amp;lt;uchar&amp;gt; heat_map_gray = generateHeatMapGray(raw_map);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; generateHeatMapColor(heat_map_gray, black_base);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;依赖：&lt;/strong&gt;&lt;code&gt;OpenCV&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在处理一些二维注视点，需要直接将离散的二维注视点转换成概率分布，基本原理是用&lt;code&gt;Gaussian&lt;/code&gt;函数进行卷积生成连续的概率分布。处理这个之前顺便做了一个简单的可视化，利用涂色原理生成热度图并涂上彩虹色。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He
    
    </summary>
    
      <category term="工程代码" scheme="http://yoursite.com/categories/%E5%B7%A5%E7%A8%8B%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="Computer Vision" scheme="http://yoursite.com/tags/Computer-Vision/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="OpenCV" scheme="http://yoursite.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>State-of-the-Art in Visual Attention Modeling</title>
    <link href="http://yoursite.com/2016/04/08/State-of-the-Art-in-Visual-Attention-Modeling/"/>
    <id>http://yoursite.com/2016/04/08/State-of-the-Art-in-Visual-Attention-Modeling/</id>
    <published>2016-04-08T05:49:19.000Z</published>
    <updated>2016-04-08T05:58:42.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;This article presents a taxonomy nearly 65 models, which provides a critical comparison of approaches, their capabilities, and shortcomings.&lt;/li&gt;
&lt;li&gt;13 criteria derived from behavioural and computational studies are formulated for quantitative comparison of attention models. &lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;This article presents a taxonomy nearly 
    
    </summary>
    
      <category term="Attention Shift" scheme="http://yoursite.com/categories/Attention-Shift/"/>
    
    
      <category term="Attention Shift" scheme="http://yoursite.com/tags/Attention-Shift/"/>
    
      <category term="Computer Vision" scheme="http://yoursite.com/tags/Computer-Vision/"/>
    
  </entry>
  
  <entry>
    <title>Articles on Attention Shift 1</title>
    <link href="http://yoursite.com/2016/04/08/Articles%20on%20Attention%20Shift%201/"/>
    <id>http://yoursite.com/2016/04/08/Articles on Attention Shift 1/</id>
    <published>2016-04-07T17:11:12.000Z</published>
    <updated>2016-04-07T15:01:00.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Section-1&quot;&gt;&lt;a href=&quot;#Section-1&quot; class=&quot;headerlink&quot; title=&quot;Section 1&quot;&gt;&lt;/a&gt;Section 1&lt;/h2&gt;&lt;h3 id=&quot;1-Attention-Shift-in-Infancy&quot;&gt;&lt;a href=&quot;#1-Attention-Shift-in-Infancy&quot; class=&quot;headerlink&quot; title=&quot;1.  Attention Shift in Infancy&quot;&gt;&lt;/a&gt;1.  Attention Shift in Infancy&lt;/h3&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;Automatic-Detection-of-Attention-Shift-in-Infancy-Eye-Tracking-in-the-Fixation-Shift-Paradigm&quot;&gt;&lt;a href=&quot;#Automatic-Detection-of-Attention-Shift-in-Infancy-Eye-Tracking-in-the-Fixation-Shift-Paradigm&quot; class=&quot;headerlink&quot; title=&quot;Automatic Detection of Attention Shift in Infancy: Eye Tracking in the Fixation Shift Paradigm&quot;&gt;&lt;/a&gt;Automatic Detection of Attention Shift in Infancy: Eye Tracking in the Fixation Shift Paradigm&lt;/h3&gt;&lt;p&gt;Louisa Kulke, Janette Atkinson, Oliver Braddick&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;&lt;em&gt;Abstract&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Changes in switches of attention between &lt;strong&gt;1 and 9 months of age&lt;/strong&gt; in &lt;strong&gt;67 TD infants&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Saccadic latencies&lt;/strong&gt;, as a measure of attention shift, from a &lt;strong&gt;central stimulus to peripheral visual target&lt;/strong&gt; , measured in Fixation Shift Paradigm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Competition Condition:&lt;/strong&gt; the central stimulus stays visible when the peripheral target appears.&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;strong&gt;Non-competition Condition:&lt;/strong&gt; the central stimulus disappears as the peripheral target appears.&lt;br&gt;&lt;strong&gt;&lt;em&gt;Fixation Shifts occur later in competition condition.&lt;/em&gt;&lt;/strong&gt;  And the difference &lt;strong&gt;decreases&lt;/strong&gt; with age.&lt;/li&gt;
&lt;li&gt;This work shows significantly &lt;strong&gt;faster disengagement&lt;/strong&gt; in infants &lt;strong&gt;over 4 months&lt;/strong&gt; than  &lt;strong&gt;in the younger group&lt;/strong&gt; .&lt;/li&gt;
&lt;li&gt;Reduced saccadic latencies in the course of a test session indicate a novel learning effect.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;&lt;em&gt;Introduction&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Saccadic latencies have been found to differ between conditions, being &lt;strong&gt;&lt;em&gt;shorter&lt;/em&gt;&lt;/strong&gt; when there is a &lt;strong&gt;time delay&lt;/strong&gt; between the central target disappearing and the peripheral target appearing and &lt;strong&gt;&lt;em&gt;highest&lt;/em&gt;&lt;/strong&gt; in the competition or overlap condition.&lt;/li&gt;
&lt;li&gt;Young infants in the 2-4 months of life show long latencies, or do not shift their gaze off the central stimulus at all in the competition condition.(&lt;strong&gt;&lt;em&gt;Sticky fixation&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[Saccadic accuracy]&lt;/strong&gt;:  saccades towards peripheral targets are often hypometric within the first 2 months of life; Infants tend to &lt;strong&gt;&lt;em&gt;undershoot the peripheral target position&lt;/em&gt;&lt;/strong&gt; followed by &lt;strong&gt;&lt;em&gt;corrective saccades to fixate the target&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Infants with &lt;strong&gt;one cerebral hemisphere removed&lt;/strong&gt; due to severe epilepsy (hemispherectomy) can &lt;strong&gt;&lt;em&gt;make fixation shifts under non-competition to both sides, but not under competition&lt;/em&gt;&lt;/strong&gt;, to a target appearing in the half-field corresponding to the surgically removed hemisphere.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[Relations between attention shift and brain]&lt;/strong&gt; :  &lt;strong&gt;Automatic engagement&lt;/strong&gt; with a target only involves &lt;strong&gt;&lt;em&gt;subcortical pathways&lt;/em&gt;&lt;/strong&gt;, whereas &lt;strong&gt;&lt;em&gt;cortical control&lt;/em&gt;&lt;/strong&gt; becomes necessary for &lt;strong&gt;disengagement&lt;/strong&gt; from a current central stimulus. In the 1st months of life, attention shifts reflect activity in subcortical networks involving the superior colliculus, with cortical control emerging at around 3 months of age, allowing the infant to shift attention more flexibly at older age.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[Relations between attention shift and atypical children]:&lt;/strong&gt; Poor disengagement under competition, possibly indicating delayed or abnormal cortical maturation, has been found in children with Williams Syndrome, pre-term born infants, infants with perinatal insults-HIE or focal lesions, siblings of austic children and infants with one hemisphere removed.&lt;/li&gt;
&lt;li&gt;Previous comparisons of different stimuli in the FSP(Fixation Shift Paradigm) indicate that stimulus features are not crucial for the results in regard to attention disengagement, with the exception of maternal faces which can lead to different saccade latencies.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Method&quot;&gt;&lt;a href=&quot;#Method&quot; class=&quot;headerlink&quot; title=&quot;Method&quot;&gt;&lt;/a&gt;&lt;em&gt;Method&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[Participants]:&lt;/strong&gt;  2 different groups of infants.&lt;br&gt;&lt;strong&gt;Group 1:&lt;/strong&gt; 23 infants, 1.42-8.18 months, M~age~ = 4.19 months, SD = 1.74.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Group 2:&lt;/strong&gt; further 44 infants, 1.19-9.10 months, M~age~ = 4.59 months, SD = 2.38.&lt;br&gt;All infants were born within 2 weeks of full term, neurologically normal at birth with no perinatal complications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[Materials and Stimuli]:&lt;/strong&gt; a gray background with mean luminance of 77cd/m^2^, each trial starts with a infant-friendly movie to attract the infant’s attention.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Central Stimuli:&lt;/strong&gt; a schematic face, reversal phase at 3 Hz, appears at least for 2 seconds. While the infant had fixated the face for 0.33 seconds (20 eye tracking samples) , the peripheral target appeared.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Peripheral Target:&lt;/strong&gt; a black and a white rectangular bar, reversal phase at 3 Hz. Disappear when the infant had fixated it for 333ms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[Design]:&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;With-in subject factor:&lt;/em&gt;&lt;/strong&gt; Condition (competition / non-competition) &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Between subject factor:&lt;/em&gt;&lt;/strong&gt; Age Group&lt;br&gt;​&lt;br&gt;&lt;strong&gt;Fixation Variables:&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;Sticky fixation&lt;/em&gt;&lt;/strong&gt; (fixate on the central schematic face for more than 5 secs), Fixation Shift to the &lt;strong&gt;&lt;em&gt;wrong&lt;/em&gt;&lt;/strong&gt; direction, &lt;strong&gt;&lt;em&gt;Correct saccades&lt;/em&gt;&lt;/strong&gt;,  &lt;strong&gt;&lt;em&gt;Fixation position&lt;/em&gt;&lt;/strong&gt; after the first saccades.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[Eye Tracking]:&lt;/strong&gt; remote eye tracker, Tobii X120.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[Procedue]:&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Calibration:&lt;/em&gt;&lt;/strong&gt; 5-point calibration on an adult before the experiment. This will improve data quality than calibration on individual infants.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Participants:&lt;/em&gt;&lt;/strong&gt; Infant was seated on the parent’s lap. The parent wore sunglasses to avoid being caught by the tracker.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Results&quot;&gt;&lt;a href=&quot;#Results&quot; class=&quot;headerlink&quot; title=&quot;Results&quot;&gt;&lt;/a&gt;&lt;em&gt;Results&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;The two subjective groups are comparable. There was no significant diffirence in saccade latency between the two groups.&lt;/li&gt;
&lt;li&gt;Only a small percentage of trials had to be excluded. About 9% of the trials showed an initial fixation shift towards the wrong direction. Sticky fixations rarely occurred.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mean saccade latencies&lt;/strong&gt; decrease with age, particularly in the competition condition.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[Gaze Position]:&lt;/strong&gt; At the end of the first saccade towards the target, younger infants’ fixations were closer to the centre of the screen. This difference was significant between age but not conditions. As the target disappeared after the first saccade towards it, &lt;strong&gt;&lt;em&gt;subsequent corrections of the undershot can be further investigated.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Discussion&quot;&gt;&lt;a href=&quot;#Discussion&quot; class=&quot;headerlink&quot; title=&quot;Discussion&quot;&gt;&lt;/a&gt;&lt;em&gt;Discussion&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Saccade latencies decreased over trial number, suggesting a small learning effect in the non-competition condition, but this was not seen in the competition condition.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Our results suggest that the motor programming or execution of eye-movements is itself immature in younger infants, in addition to the attentional control of disengagement.&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h3 id=&quot;2-Visual-Attention-as-Early-Predictor-of-Autism&quot;&gt;&lt;a href=&quot;#2-Visual-Attention-as-Early-Predictor-of-Autism&quot; class=&quot;headerlink&quot; title=&quot;2. Visual Attention as Early Predictor of Autism&quot;&gt;&lt;/a&gt;2. Visual Attention as Early Predictor of Autism&lt;/h3&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;Enhanced-Visual-Attention-May-Be-Early-Predictor-of-Autism&quot;&gt;&lt;a href=&quot;#Enhanced-Visual-Attention-May-Be-Early-Predictor-of-Autism&quot; class=&quot;headerlink&quot; title=&quot;Enhanced Visual Attention May Be Early Predictor of Autism&quot;&gt;&lt;/a&gt;Enhanced Visual Attention May Be Early Predictor of Autism&lt;/h3&gt;&lt;p&gt;Infants who can quickly recognize unusual visual patterns may be more likely to develop autism symptoms.&lt;/p&gt;
&lt;p&gt;Jessica Schmerler, Scientific American&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;On average, diagnosis does not occur until after age of four, yet all evidence indicates that early intervention is the best way to maximize the treatment impact.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;AOSI (Autism Observation Scale for Infants)&lt;/strong&gt; measures &lt;strong&gt;&lt;em&gt;precursors to symptoms&lt;/em&gt;&lt;/strong&gt;, such as &lt;em&gt;a baby’s response to name, eye contact, social reciprocity (社会性互惠) and imitation (模仿)&lt;/em&gt;. The &lt;strong&gt;ADOS (Autism Diagnostic Observation Schedule)&lt;/strong&gt; measures the &lt;strong&gt;&lt;em&gt;characteristic and severity of autism symptoms&lt;/em&gt;&lt;/strong&gt; such as &lt;em&gt;social affectation and repetitive and restrictive behaviors&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Experts have long recognized that certain individuals with autism have superior visual skills, such as increased visual memory of artistic talent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They tested both visual attention and autism symptoms in infants at 9 months, 15 months and 2 years.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;High Risk Infants:&lt;/strong&gt; 82, have an older sibling diagnosed with autism.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Low Risk Infants:&lt;/strong&gt; 27, have no mental or medical conditions and no first-degree relatives with an autism diagnosis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Autism Symptoms Marker:&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;AOSI&lt;/em&gt;&lt;/strong&gt; at 9 and 15 months, &lt;strong&gt;&lt;em&gt;ADOS&lt;/em&gt;&lt;/strong&gt; at 2 years.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[Stimulus]:&lt;/strong&gt; After a short animation, an image will appear containing a target that was the “odd-one-out”. For example, in a circle of seven “X”s an “O” or plus sign might appear. Researchers measure the time it took for them to look towards the odd target.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The kids who at 9 months quickly identified the odd visual element were more likely to show early symptoms of autism on the AOSI test at 15 and 24 months. But visual search performance did not directly correlate with ADOS scores at 2 years.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Although enhanced visual perception at 9 months can predict the &lt;strong&gt;presence of autism symptoms&lt;/strong&gt; later, it does not predict future &lt;strong&gt;symptom severity&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Further research is necessary to establish whether superior attention and perception is a precursor to other autism symptoms or is simply another symptom itself.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;Enhanced-Visual-Search-in-Infancy-Predicts-Emerging-Autism-Symptoms&quot;&gt;&lt;a href=&quot;#Enhanced-Visual-Search-in-Infancy-Predicts-Emerging-Autism-Symptoms&quot; class=&quot;headerlink&quot; title=&quot;Enhanced Visual Search in Infancy Predicts Emerging Autism Symptoms&quot;&gt;&lt;/a&gt;Enhanced Visual Search in Infancy Predicts Emerging Autism Symptoms&lt;/h3&gt;&lt;p&gt;Teodora Gliga, Rachael Bedford, et al&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;&lt;em&gt;Summary&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;In addition to core symptoms, such as social interaction and communication difficulties, restricted and repetitive behaviors, autism is also characterized by aspects of superior perception.&lt;/li&gt;
&lt;li&gt;Perceptual and social interaction atypicalities could reflect coexpressed but biologically independent pathologies as suggested by a “fractionable” phenotype model of autism.&lt;/li&gt;
&lt;li&gt;Enhanced visual search performance at 9 months predicted a higher level of autism symptoms at 15 months and at 2 years. Infant perceptual atypicalities are thus intrinsically linked to the emerging autism phenotype.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Results-and-Discussion&quot;&gt;&lt;a href=&quot;#Results-and-Discussion&quot; class=&quot;headerlink&quot; title=&quot;Results and Discussion&quot;&gt;&lt;/a&gt;&lt;em&gt;Results and Discussion&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Nine-month visual search significantly predicted the 15-month AOSI and the 2-year ADOS score, with increased visual search accuracy predicting higher symptom severity.&lt;/li&gt;
&lt;li&gt;After accounting for earlier autism markers, we ran an autoregressive model with regressions rather than correlations. The relationship between 9-month visual search and 15-month AOSI remained significant, but the direct relationship with later ADOS became non-significant, suggesting a developmental pathway in which infant visual search contributes to autism symptoms at 15 months of age and that in turn contributes to autism severity at 2 years of age.&lt;/li&gt;
&lt;li&gt;We analyzed the first saccade made in each trial, and not whether infants ever visited the target during the trial.&lt;/li&gt;
&lt;li&gt;Given a higher incidence of hyperlexia in autism, future studies should address the question of whether the demonstrated superior visual search also predicts better recognition of letters later in childhood.&lt;/li&gt;
&lt;li&gt;Our findings corroborate evidence for atypical oculomotor behavior and increased frontal-occipital functional connectivity during the first year of life of these infants that later develop autism symptoms, by suggesting that perturbations in general processes, such as perception or attention, are more important than previously believed in the developmental pathway to this disorder.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;3-Attention-Shift-and-Novelty&quot;&gt;&lt;a href=&quot;#3-Attention-Shift-and-Novelty&quot; class=&quot;headerlink&quot; title=&quot;3. Attention Shift and Novelty&quot;&gt;&lt;/a&gt;3. Attention Shift and Novelty&lt;/h3&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;Attention-Shift-Impairments-and-Novelty-Avoidance–Effects-of-Characteristics-of-Autism-in-Self-Organization-of-an-Artificial-Neural-Network&quot;&gt;&lt;a href=&quot;#Attention-Shift-Impairments-and-Novelty-Avoidance–Effects-of-Characteristics-of-Autism-in-Self-Organization-of-an-Artificial-Neural-Network&quot; class=&quot;headerlink&quot; title=&quot;Attention Shift Impairments and Novelty Avoidance–Effects of Characteristics of Autism in Self-Organization of an Artificial Neural Network&quot;&gt;&lt;/a&gt;Attention Shift Impairments and Novelty Avoidance–Effects of Characteristics of Autism in Self-Organization of an Artificial Neural Network&lt;/h3&gt;&lt;p&gt;Lennart Gustafsson, Andrew P. Paplinski&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Abstract-1&quot;&gt;&lt;a href=&quot;#Abstract-1&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;&lt;em&gt;Abstract&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Attention shift impairment&lt;/strong&gt; and the &lt;strong&gt;negative response to novelty&lt;/strong&gt; are prevalent in individuals with autism.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It has been theorized that &lt;strong&gt;cortical feature maps&lt;/strong&gt; in individuals with autism are inadequate for forming abstract codes and representations, explaining the importance paid to detail, rather than salient features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They model the attention shift by presenting an ANN with stimuli from 2 sources in 4 different modes:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1)Novelty seeking:&lt;/strong&gt; regarded as normal learning&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2)Attention shift impairment:&lt;/strong&gt; shifts are made with a low probability&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3)Novelty avoiding:&lt;/strong&gt; shifts are made if the new stimulus is not too different from earlier stimuli&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4)Novelty avoidance in conjunction with attention shift impairment&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The resulting feature maps from learning with mode 1 and mode 2 were identical. &lt;/p&gt;
&lt;p&gt;The ones from learning with mode 3 were adaptive to one of the sources at the expense of the other.&lt;/p&gt;
&lt;p&gt;The resulting feature maps from learning with mode 4 were strikingly  different, ranging from almost normal to poor, only reflecting a reduced source, from one stimulation to the next, even with identical initial conditions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Introduction-1&quot;&gt;&lt;a href=&quot;#Introduction-1&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;&lt;em&gt;Introduction&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;There is a general agreement that attentional impairment s commonly seen in autism. This impairment includes joint attention and attention shifts.&lt;/li&gt;
&lt;li&gt;Researchers hypothesize that novelty itself is disagreeable to children with autism (personal stimuli are assumed to be connected with novelty more often than impersonal stimuli) and that &lt;strong&gt;novelty avoidance will cause attention impairments.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;It was found that autistic children are impaired in their capacity to encode information from sensory to abstract codes, making it difficult for them to see what normal individuals regard as salient features of a situation.&lt;/li&gt;
&lt;li&gt;A learning process for an artificial neural network may result in an inadequate feature map such that correct classification of stimuli, ignoring incident detail, is not well accomplished.&lt;/li&gt;
&lt;li&gt;The purpose of this paper is to &lt;strong&gt;examine how the attention shift impairment and novelty avoidance influence the self-organization of an artificial neural network&lt;/strong&gt; and to &lt;strong&gt;discuss the characteristics of the resulting maps&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Methods&quot;&gt;&lt;a href=&quot;#Methods&quot; class=&quot;headerlink&quot; title=&quot;Methods&quot;&gt;&lt;/a&gt;&lt;em&gt;Methods&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Two sources of stimuli&lt;/strong&gt; are employed. New stimuli are made available by these sources at random, although only by one source at a time. The ANN is engaged in &lt;strong&gt;a particular source when the output from that source forms the input to the ANN&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shift of the engagement to the alternate source is made in 4 different modes in the SOM.&lt;/p&gt;
&lt;p&gt;1). &lt;strong&gt;Novelty seeking (Normal State)&lt;/strong&gt;: attention is shifted to the alternate source if that source presents the next new stimulus.&lt;/p&gt;
&lt;p&gt;2). &lt;strong&gt;Attention shift impairment&lt;/strong&gt;: attention is shifted to the alternate source with a probability of 0.01 if that source presents the next new stimulus.&lt;/p&gt;
&lt;p&gt;3). &lt;strong&gt;Novelty avoidance&lt;/strong&gt;: attention is shifted to the alternate source if that source presents the next new stimulus but only if &lt;strong&gt;&lt;em&gt;the new stimulus output from that source is less distance from the weight vector of the node most resembling the stimulus output than the average distance between stimulus and weight vectors in the past&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;4). &lt;strong&gt;Novelty avoidance in conjunction with attention shift impairment&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each source in the first two sets of simulations provides three classes of stimuli. There are 10 exemplars in each class for each source. In the last two sets of simulations one source is reduced to provide only 2 classes of stimuli, one of them with 20 exemplars.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Results-1&quot;&gt;&lt;a href=&quot;#Results-1&quot; class=&quot;headerlink&quot; title=&quot;Results&quot;&gt;&lt;/a&gt;&lt;em&gt;Results&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the &lt;strong&gt;&lt;em&gt;first&lt;/em&gt;&lt;/strong&gt; set of simulations a canonical SOM with nodes organized in a 2x2 mesh was used. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Normal learning with novelty seeking and learning with attention shift impairment results in the &lt;em&gt;same&lt;/em&gt; maps&lt;/strong&gt;– the node weights assume values which are the mean values of each class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learning with novelty avoidance results in a map where nodes have adapted to the stimuli from one source&lt;/strong&gt;– the node weights assume values which are the mean value of the same subclass in each class.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../uploads/20160408/result_set1.png&quot; alt=&quot;result of set1&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the &lt;strong&gt;&lt;em&gt;second&lt;/em&gt;&lt;/strong&gt; set of simulations a SOM with an excess of nodes, in a 3x3 mesh, was used.&lt;/p&gt;
&lt;p&gt;Learning in mode1 and mode2 resulted in maps that &lt;strong&gt;in some cases have nodes adapted to the mean of subclasses from both sources combined&lt;/strong&gt; and &lt;strong&gt;in other cases adapted to the mean of subclasses from each source&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Learning in mode3 resulted in maps which &lt;strong&gt;give preference to one source&lt;/strong&gt; and most nodes will &lt;strong&gt;adapt to subclass from that source&lt;/strong&gt;, but nodes may also &lt;strong&gt;adapt to one or more subclasses of the other source&lt;/strong&gt;.&lt;br&gt;&lt;img src=&quot;../uploads/20160408/result_set2.png&quot; alt=&quot;result of set2&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Third Set&lt;/em&gt;&lt;/strong&gt;, canonical 2x2 SOM.&lt;/p&gt;
&lt;p&gt;Resulting maps from learning in mode1 and mode2 are the same.&lt;/p&gt;
&lt;p&gt;Maps in mode3 shows that the  &lt;strong&gt;source with a reduced set of stimuli dominates the development of learning&lt;/strong&gt;, leaving one subclass of stimuli from the full source without any detector node.&lt;br&gt;&lt;img src=&quot;../uploads/20160408/result_set3.png&quot; alt=&quot;result of set3&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Fourth Set&lt;/em&gt;&lt;/strong&gt;, 4x4 SOM&lt;/p&gt;
&lt;p&gt;Learning in mode3 shows a tendency to normality.&lt;br&gt;&lt;img src=&quot;../uploads/20160408/result_set4.png&quot; alt=&quot;result of set4&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Learning in Mode4&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The results in learning in mode 4 are qualitatively very different. Learning with novelty avoidance and attention shift impairment is far from robust. It is clear that better maps result from simulations where the domination by the reduced source, as indicated by the end if attention shifts, comes at a late stage.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Discussion-1&quot;&gt;&lt;a href=&quot;#Discussion-1&quot; class=&quot;headerlink&quot; title=&quot;Discussion&quot;&gt;&lt;/a&gt;&lt;em&gt;Discussion&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;The results show that &lt;strong&gt;novelty avoidance results in inadequate maps with characteristic deficits&lt;/strong&gt; such that they lend support to the theory that &lt;strong&gt;&lt;em&gt;novelty avoidance may be primary in causing other autistic characteristics&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The results do not lend support to the hypothesis that attention shift impairments by itself may be primary in causing other autistic characteristics since &lt;strong&gt;&lt;em&gt;self-organization with attention shift impairment have always resulted in normal maps.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Attention shift impairment in conjunction with novelty avoidance will result in self-organization with an additional feature which may be interpreted as a characteristic common in autism.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;Familiarity-to-novelty-shift-driven-by-learning-a-conceptual-and-computational-model&quot;&gt;&lt;a href=&quot;#Familiarity-to-novelty-shift-driven-by-learning-a-conceptual-and-computational-model&quot; class=&quot;headerlink&quot; title=&quot;Familiarity-to-novelty shift driven by learning: a conceptual and computational model&quot;&gt;&lt;/a&gt;Familiarity-to-novelty shift driven by learning: a conceptual and computational model&lt;/h3&gt;&lt;p&gt;Quan Wang, Pramod Chandrashekhariah and Gabriele Spina&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Abstract-2&quot;&gt;&lt;a href=&quot;#Abstract-2&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;&lt;em&gt;Abstract&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;They proposed a new theory explaining the familiarity-to-novelty shift in infant habituation. Infants’ interest in a stimulus is related to their learning progress, i.e, the improvement of an internal model of the stimulus.&lt;/li&gt;
&lt;li&gt;They propose that infants prefer the stimulus for which its current learning progress is maximal.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Introduction-2&quot;&gt;&lt;a href=&quot;#Introduction-2&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;&lt;em&gt;Introduction&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In infant habituation experiments, participants undergo a training phase of habituation in which the image or dynamic displays of objects are shown repeatedly, then they are tested on familiar or novel stimuli.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Familiarity-to-novelty Shift:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;According to &lt;strong&gt;&lt;em&gt;novelty preference theory&lt;/em&gt;&lt;/strong&gt;, infants look longer at novel stimuli during test phase.&lt;/p&gt;
&lt;p&gt;It is also observed that &lt;strong&gt;&lt;em&gt;in the early phase of habituation training&lt;/em&gt;&lt;/strong&gt;, infants look longer or react more to familiar stimuli than novel stimuli.&lt;/p&gt;
&lt;p&gt;Only with sufficient exposure to the training stimulus, the response to the familiar event decreases and infants look longer at novel stimuli.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Familiarity-to-novelty shift is not tied to a particular age but depends on the &lt;strong&gt;perceptional complexity of the stimuli, the amount of familiarization, and the form of response necessary to elicit the progression&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[Hypothesis of this work]&lt;/strong&gt;: attention shift in infants is related to intrinsic motivation and learning progress. Infants learn internal models of stimuli and &lt;strong&gt;&lt;em&gt;their interest in a stimulus is determined by their momentary learning progress&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Models&quot;&gt;&lt;a href=&quot;#Models&quot; class=&quot;headerlink&quot; title=&quot;Models&quot;&gt;&lt;/a&gt;&lt;em&gt;Models&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[Conceptual Model]&lt;/strong&gt;: attention is operationalized with the &lt;strong&gt;&lt;em&gt;learning rate&lt;/em&gt;&lt;/strong&gt; which is the first derivative of the &lt;strong&gt;&lt;em&gt;learning curve&lt;/em&gt;&lt;/strong&gt;. The familiarity-to-novelty shift results from two competing stimuli having different complexities and by choosing the stimulus that has higher learning rate. &lt;strong&gt;Attention shift&lt;/strong&gt; occurs when the learning rate of the second stimulus overtake that of the first.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;(20160408/ familiarity_to_novelty_shift1.png&quot; alt=&quot;familiarity to novelty shift&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[SL-SOM] Selective Learning Self-Organization Map:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../uploads/20160408/slsom1.png&quot; alt=&quot;SL SOM&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../uploads/20160408/slsom2.png&quot; alt=&quot;SLSOM iteration&quot;&gt;&lt;/p&gt;
&lt;p&gt;$\beta(n)$ (familiarity value) is introduced for the purpose of identifying the familiarity of the input data sample that has appeared at a given time. $\beta(n)$ raises with the familiarity of the object’s appearance but eventually saturates.&lt;br&gt;$\gamma(n)$ (consistency value) is introduced in order to guage the change in the object appearance. This term is motivated by the learning progress of subjects. Infants are significantly more likely to look away at highly informative events, so we argue here that the subjects are unlikely to learn an object when its appearance is changing drastically from time to time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;Social-attention-a-possible-early-indicator-of-efficacy-in-autism-clinical-trials&quot;&gt;&lt;a href=&quot;#Social-attention-a-possible-early-indicator-of-efficacy-in-autism-clinical-trials&quot; class=&quot;headerlink&quot; title=&quot;Social attention: a possible early indicator of efficacy in autism clinical trials&quot;&gt;&lt;/a&gt;Social attention: a possible early indicator of efficacy in autism clinical trials&lt;/h4&gt;&lt;p&gt;Geraldine Dawson, Raphael Bernier and Robert H Ring&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Abstract-3&quot;&gt;&lt;a href=&quot;#Abstract-3&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;&lt;em&gt;Abstract&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;This paper provides an overview of research on &lt;strong&gt;social attention impairments in autism&lt;/strong&gt; and their &lt;strong&gt;relation to deficiencies&lt;/strong&gt; in neural circuitry related to social reward.&lt;/li&gt;
&lt;li&gt;They offer a framework for considering social attention as a potential moderator or mediator of response to early behavioral intervention, and as an early indicator of effcacy if behavioral and/or pharmacological treatments aimed at addressing the social impairments in autism.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;REVIEW&quot;&gt;&lt;a href=&quot;#REVIEW&quot; class=&quot;headerlink&quot; title=&quot;[REVIEW]&quot;&gt;&lt;/a&gt;[REVIEW]&lt;/h4&gt;&lt;h4 id=&quot;1-Early-manifestation-of-social-attention-impairments-in-ASD&quot;&gt;&lt;a href=&quot;#1-Early-manifestation-of-social-attention-impairments-in-ASD&quot; class=&quot;headerlink&quot; title=&quot;1. Early manifestation of social attention impairments in ASD&quot;&gt;&lt;/a&gt;&lt;em&gt;1. Early manifestation of social attention impairments in ASD&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Typical developed infants&lt;/strong&gt; show preferencntial attention to people, including their eyes, faces, and movements from the first day of life.&lt;/li&gt;
&lt;li&gt;Chawarska &lt;em&gt;et al&lt;/em&gt; found that, unlike toddlers with typical development or developmental delay, &lt;strong&gt;&lt;em&gt;toddlers with ASD did not have difficulty disengaging their attention from a face&lt;/em&gt;&lt;/strong&gt; when presented with a competing stimulus.&lt;/li&gt;
&lt;li&gt;A failure to orient to social stimuli, termed “&lt;strong&gt;Social Orienting Impairment&lt;/strong&gt;“ was documented in preschool-age children with autism and was subsequently demonstrated in &lt;strong&gt;&lt;em&gt;10-month-old&lt;/em&gt;&lt;/strong&gt; infants later diagnosed with autism.&lt;/li&gt;
&lt;li&gt;Klin &lt;em&gt;et al&lt;/em&gt; reported that 2-year-old with autism &lt;strong&gt;orient to nonsocial contingencies rather than biological motion&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Social Motivation Hypothesis&lt;/strong&gt;: autism is associated with &lt;strong&gt;&lt;em&gt;reduced social reward sensitivity&lt;/em&gt;&lt;/strong&gt; manifest in a failure to affectively tag socially relevant stimuli.&lt;/li&gt;
&lt;li&gt;Preschool-age children with ASD are &lt;strong&gt;less likely to smile&lt;/strong&gt; when looking at their mothers during social interations, especially during joint attention episodes.&lt;/li&gt;
&lt;li&gt;Reduced social attention has potentially negative downstream consequences for social and language development and learning, in general, affecting the development and specialization of neural circuitry subserving these domains, which is experience-dependent.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;2-Neural-mechanisms-involved-in-reward-processing-and-implications-for-ASD&quot;&gt;&lt;a href=&quot;#2-Neural-mechanisms-involved-in-reward-processing-and-implications-for-ASD&quot; class=&quot;headerlink&quot; title=&quot;2. Neural mechanisms involved in reward processing and implications for ASD&quot;&gt;&lt;/a&gt;&lt;em&gt;2. Neural mechanisms involved in reward processing and implications for ASD&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;The anterior cingulate cortex (ACC) and orbitofrontal cortex (OFC), as well as regions involved in the mesolimbic dopamine system, which originates in the ventral tegmental area (VTA) and project to the nucleus accumbens (NA) in the ventral striatum, have long been associated with reward processes. &lt;strong&gt;&lt;em&gt;Functional imaging studies&lt;/em&gt;&lt;/strong&gt; implicate this system and these structures during the viewing of social stimuli such as faces, or when receiving social reinforcement.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;3-Neuropeptides-involved-in-reward-processing-and-ASD&quot;&gt;&lt;a href=&quot;#3-Neuropeptides-involved-in-reward-processing-and-ASD&quot; class=&quot;headerlink&quot; title=&quot;3. Neuropeptides involved in reward processing and ASD&quot;&gt;&lt;/a&gt;&lt;em&gt;3. Neuropeptides involved in reward processing and ASD&lt;/em&gt;&lt;/h4&gt;&lt;h4 id=&quot;4-Studies-showing-altered-levels-of-oxytocin-in-ASD&quot;&gt;&lt;a href=&quot;#4-Studies-showing-altered-levels-of-oxytocin-in-ASD&quot; class=&quot;headerlink&quot; title=&quot;4. Studies showing altered levels of oxytocin in ASD&quot;&gt;&lt;/a&gt;&lt;em&gt;4. Studies showing altered levels of oxytocin in ASD&lt;/em&gt;&lt;/h4&gt;&lt;h4 id=&quot;5-Impact-of-oxytocin-on-social-attention-functioning-in-ASD-participants&quot;&gt;&lt;a href=&quot;#5-Impact-of-oxytocin-on-social-attention-functioning-in-ASD-participants&quot; class=&quot;headerlink&quot; title=&quot;5. Impact of oxytocin on social attention/functioning in ASD participants&quot;&gt;&lt;/a&gt;&lt;em&gt;5. Impact of oxytocin on social attention/functioning in ASD participants&lt;/em&gt;&lt;/h4&gt;&lt;h4 id=&quot;6-Social-attention-as-a-moderator-and-mediator-in-autism&quot;&gt;&lt;a href=&quot;#6-Social-attention-as-a-moderator-and-mediator-in-autism&quot; class=&quot;headerlink&quot; title=&quot;6. Social attention as a moderator and mediator in autism&quot;&gt;&lt;/a&gt;&lt;em&gt;6. Social attention as a moderator and mediator in autism&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Many studies have demonstrated that reward facilitates attention to specific stimuli, and that reward-based priorities strongly influence how attention is allocated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ERP measures of attention have been shown to be closely linked to reward anticipation, and other studies have demonstrated that &lt;strong&gt;visual attention to a stimulus is modulated by its associated value&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vismara and Rogers summarized the extensive research literature on behavioral interventions for children with ASD and concluded that &lt;strong&gt;both comprehensive and targeted interventions can significantly improve autism symptoms&lt;/strong&gt; in young children and toddlers with ASD.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Measures of social attention could potentially serve as &lt;strong&gt;&lt;em&gt;an early predictor of treatment response&lt;/em&gt;&lt;/strong&gt; in intervention trials, whether behavioral or pharmacological, in which enhancement of social motivation/social attention is presumed to be affected and central to the mechanism of change.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is possible that response to a behavioral intervention could be enhanced through pharmacological intervention that augments social attention or otherwise improves the tractability of other components of the treatment plan.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;7-How-to-measure-social-attention-in-individuals-with-ASD&quot;&gt;&lt;a href=&quot;#7-How-to-measure-social-attention-in-individuals-with-ASD&quot; class=&quot;headerlink&quot; title=&quot;7. How to measure social attention in individuals with ASD&quot;&gt;&lt;/a&gt;&lt;em&gt;7. How to measure social attention in individuals with ASD&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Behavioral Measures&lt;/li&gt;
&lt;li&gt;Electrophysiological Measures&lt;/li&gt;
&lt;li&gt;Eye Tracking Measures&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;../uploads/20160408/measuring1.png&quot; alt=&quot;measuring table 1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../uploads/20160408/measuring2.png&quot; alt=&quot;measuring table 2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../uploads/20160408/measuring3.png&quot; alt=&quot;measuring table 3&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Conclusions&quot;&gt;&lt;a href=&quot;#Conclusions&quot; class=&quot;headerlink&quot; title=&quot;Conclusions&quot;&gt;&lt;/a&gt;&lt;em&gt;Conclusions&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Early behavioral intervention serves to increase children’s attention to and enjoyment of social interactions, thereby increasing opportunities for learning and helping steer brain and behavioral development back toward the normal trajectory.&lt;/li&gt;
&lt;li&gt;Oxytocin may enhance social engagement and attention in  persons with ASD through its effects of neural circuitry related to social reward.&lt;/li&gt;
&lt;li&gt;Attention is closely related to the reward value of stimuli, activating the ACC which is known to mediate attention and be a key region involved in reward processing.&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Section-1&quot;&gt;&lt;a href=&quot;#Section-1&quot; class=&quot;headerlink&quot; title=&quot;Section 1&quot;&gt;&lt;/a&gt;Section 1&lt;/h2&gt;&lt;h3 id=&quot;1-Attention-Shift-in-Infancy&quot;&gt;&lt;a href=&quot;#1-Attention-Shift-in-Infancy&quot; class=&quot;headerlink&quot; title=&quot;1.  Attention Shift in Infancy&quot;&gt;&lt;/a&gt;1.  Attention Shift in Infancy&lt;/h3&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;Automatic-Detection-of-Attention-Shift-in-Infancy-Eye-Tracking-in-the-Fixation-Shift-Paradigm&quot;&gt;&lt;a href=&quot;#Automatic-Detection-of-Attention-Shift-in-Infancy-Eye-Tracking-in-the-Fixation-Shift-Paradigm&quot; class=&quot;headerlink&quot; title=&quot;Automatic Detection of Attention Shift in Infancy: Eye Tracking in the Fixation Shift Paradigm&quot;&gt;&lt;/a&gt;Automatic Detection of Attention Shift in Infancy: Eye Tracking in the Fixation Shift Paradigm&lt;/h3&gt;&lt;p&gt;Louisa Kulke, Janette Atkinson, Oliver Braddick&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;&lt;em&gt;Abstract&lt;/em&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Changes in switches of attention between &lt;strong&gt;1 and 9 months of age&lt;/strong&gt; in &lt;strong&gt;67 TD infants&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Saccadic latencies&lt;/strong&gt;, as a measure of attention shift, from a &lt;strong&gt;central stimulus to peripheral visual target&lt;/strong&gt; , measured in Fixation Shift Paradigm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Competition Condition:&lt;/strong&gt; the central stimulus stays visible when the peripheral target appears.
    
    </summary>
    
      <category term="Attention Shift" scheme="http://yoursite.com/categories/Attention-Shift/"/>
    
    
      <category term="Attention Shift" scheme="http://yoursite.com/tags/Attention-Shift/"/>
    
      <category term="Computer Vision" scheme="http://yoursite.com/tags/Computer-Vision/"/>
    
  </entry>
  
  <entry>
    <title>A*寻路算法</title>
    <link href="http://yoursite.com/2016/04/07/A*%E5%AF%BB%E8%B7%AF%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2016/04/07/A*寻路算法/</id>
    <published>2016-04-07T10:39:11.000Z</published>
    <updated>2016-04-07T13:57:57.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-A-算法&quot;&gt;&lt;a href=&quot;#1-A-算法&quot; class=&quot;headerlink&quot; title=&quot;1. A*算法&quot;&gt;&lt;/a&gt;1. A*算法&lt;/h2&gt;&lt;p&gt;启发式搜索、估价函数、时间上最优、空间增长指数级别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Start Point&lt;/strong&gt;, &lt;strong&gt;End Point&lt;/strong&gt;, &lt;strong&gt;Obstacles&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;估值函数，&lt;strong&gt;F=G+H&lt;/strong&gt;, F为从Start Point到当前点的耗费，H为从当前点到End Point的耗费。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OpenList&lt;/strong&gt; 存放需要估值的点 &lt;strong&gt;CloseList&lt;/strong&gt; 存放估值过的点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Algorithms&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;OpenList.add(StartPoint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;do &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	current_point = OpenList.lowestF();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	OpenList.remove(current_point);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	CloseList.add(current_point);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for (point in Neighbourhood(current_point)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (point in CloseList || point is Obstacles) continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		else if (point not in OpenList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			calculateFGH(point);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			point.father = current_point;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			OpenList.add(point);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if (current_point.G + calculateG(current_point, point) &amp;lt; point.G) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				point.G = current_point.G + calculateG(current_point, point);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				point.F = point.G + point.H;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				point.father = current_point;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; while (OpenList.size()  &amp;amp;&amp;amp;  EndPoint not in CloseList)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find paths&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-A-算法&quot;&gt;&lt;a href=&quot;#1-A-算法&quot; class=&quot;headerlink&quot; title=&quot;1. A*算法&quot;&gt;&lt;/a&gt;1. A*算法&lt;/h2&gt;&lt;p&gt;启发式搜索、估价函数、时间上最优、空间增长指数级别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Start
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>用C++编译器优化实现记忆化</title>
    <link href="http://yoursite.com/2016/04/07/%E7%94%A8C++%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%98%E5%8C%96%E5%AE%9E%E7%8E%B0%E8%AE%B0%E5%BF%86%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2016/04/07/用C++的编译器优化实现记忆功能/</id>
    <published>2016-04-07T10:10:07.000Z</published>
    <updated>2016-04-07T13:53:39.000Z</updated>
    
    <content type="html">&lt;p&gt;如果要实现输出&lt;code&gt;fib(100)%1200007&lt;/code&gt;，可以实现用编译器来自动记忆化。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; fib&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val = (fib&amp;lt;x - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;::val + fib&amp;lt;x - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;::val) % &lt;span class=&quot;number&quot;&gt;1200007&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; fib&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; fib&amp;lt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; fib&amp;lt;&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&amp;gt;::val &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;编译器在编译的时候就会对这个进行优化，会非常快速算出来。&lt;/p&gt;
&lt;p&gt;【工程代码】&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; fib&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val = (fib&amp;lt;x - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;::val + fib&amp;lt;x - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;::val) % &lt;span class=&quot;number&quot;&gt;1200007&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; fib&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; fib&amp;lt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x &amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (fib2(x - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + fib2(x - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)) % &lt;span class=&quot;number&quot;&gt;1200007&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, b = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) b = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) b = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i &amp;lt;= x; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            c = a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            a = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b = c % &lt;span class=&quot;number&quot;&gt;1200007&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; fib4&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *nums;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; *labels;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (labels[x]) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums[x];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nums[x] = calc(x - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + calc(x - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        labels[x] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums[x] % &lt;span class=&quot;number&quot;&gt;1200007&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fib4(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n = x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nums = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; [n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        labels = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; [n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(labels, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;) * n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        labels[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = labels[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nums[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getFib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; calc(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; fib&amp;lt;&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&amp;gt;::val &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; fib3(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fib4 f = fib4(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; f.getFib() &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;如果要实现输出&lt;code&gt;fib(100)%1200007&lt;/code&gt;，可以实现用编译器来自动记忆化。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; fib&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val = (fib&amp;lt;x - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;::val + fib&amp;lt;x - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;::val) % &lt;span class=&quot;number&quot;&gt;1200007&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; fib&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; fib&amp;lt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; fib&amp;lt;&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&amp;gt;::val &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>整数划分问题</title>
    <link href="http://yoursite.com/2016/04/07/%E6%95%B4%E6%95%B0%E5%88%92%E5%88%86%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/04/07/整数划分问题/</id>
    <published>2016-04-07T10:00:07.000Z</published>
    <updated>2016-04-07T09:45:10.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;整数划分问题&quot;&gt;&lt;a href=&quot;#整数划分问题&quot; class=&quot;headerlink&quot; title=&quot;整数划分问题&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.cnblogs.com/wanghetao/archive/2013/11/25/3442192.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;整数划分问题&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;2015-09-13&lt;/p&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;将正整数n表示成一系列正整数之和，&lt;code&gt;n=n1+n2+...+nk&lt;/code&gt;，其中有&lt;code&gt;n1&amp;gt;=n2&amp;gt;=...&amp;gt;=nk&amp;gt;=1, k&amp;gt;=1&lt;/code&gt;，这种表示成为正整数n的划分。如果限定k则称为n的k划分。&lt;/p&gt;
&lt;h2 id=&quot;基本思路&quot;&gt;&lt;a href=&quot;#基本思路&quot; class=&quot;headerlink&quot; title=&quot;基本思路&quot;&gt;&lt;/a&gt;基本思路&lt;/h2&gt;&lt;p&gt;考虑n的划分。&lt;/p&gt;
&lt;p&gt;记F[n,k]为n的1划分+2划分+…+k划分的数目，则n的划分即为F[n,n]。&lt;/p&gt;
&lt;p&gt;则n的k划分为F[n,k]-F[n,k-1]。&lt;/p&gt;
&lt;p&gt;考虑以下5种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;n=1，显然只能有一个情况，F[1,]=1&lt;/li&gt;
&lt;li&gt;k=1，只有一个划分，F[,1]=1&lt;/li&gt;
&lt;li&gt;n=k，如果划分中有n，则只有一种情况；如果没有n，则最大的数为n-1，此时划分数为F[n,n-1]。因此加起来就是F[n,n]=1+F[n,n-1]&lt;/li&gt;
&lt;li&gt;n&amp;lt;k，显然k不能超过n，因此等价于n=k，F[n,k]=F[n,n]&lt;/li&gt;
&lt;li&gt;n&amp;gt;k，如果有k划分，则等价于F[n-k,k]；否则没有k划分，等价于F[n,k-1]；加起来就是F[n-k,k]+F[n,k-1]。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此得到伪代码1：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[CODE]&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; || k == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n &amp;lt;= k) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + fun(n, n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fun(n - k, k) + fun(n, k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;伪代码2：放苹果&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[CODE]&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;cpp&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (k == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fun(n - k, k) + fun(n, k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://cxsjsx.openjudge.cn/2015finalpractice/35/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简单的整数划分问题&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;描述&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;将正整数n 表示成一系列正整数之和，n=n1+n2+…+nk, 其中n1&amp;gt;=n2&amp;gt;=…&amp;gt;=nk&amp;gt;=1 ，k&amp;gt;=1 。&lt;br&gt;正整数n 的这种表示称为正整数n 的划分。正整数n 的不同的划分个数称为正整数n 的划分数。&lt;br&gt;&lt;em&gt;输入&lt;/em&gt;&lt;br&gt;标准的输入包含若干组测试数据。每组测试数据是一个整数N(0 &amp;lt; N &amp;lt;= 50)。&lt;br&gt;&lt;em&gt;输出&lt;/em&gt;&lt;br&gt;对于每组测试数据，输出N的划分数。&lt;br&gt;&lt;em&gt;样例输入&lt;/em&gt;&lt;br&gt;5&lt;br&gt;&lt;em&gt;样例输出&lt;/em&gt;&lt;br&gt;7&lt;br&gt;&lt;em&gt;提示&lt;/em&gt;&lt;br&gt;5, 4+1, 3+2, 3+1+1, 2+2+1, 2+1+1+1, 1+1+1+1+1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;放苹果&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;描述&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;将n个苹果放到m个盘子上，允许盘子放空，问有几种放法。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;整数划分问题&quot;&gt;&lt;a href=&quot;#整数划分问题&quot; class=&quot;headerlink&quot; title=&quot;整数划分问题&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.cnblogs.com/wanghetao/archive/2013/11/25/3442192.html&quot;&gt;整数划分问题&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;2015-09-13&lt;/p&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;将正整数n表示成一系列正整数之和，&lt;code&gt;n=n1+n2+...+nk&lt;/code&gt;，其中有&lt;code&gt;n1&amp;gt;=n2&amp;gt;=...&amp;gt;=nk&amp;gt;=1, k&amp;gt;=1&lt;/code&gt;，这种表示成为正整数n的划分。如果限定k则称为n的k划分。&lt;/p&gt;
&lt;h2 id=&quot;基本思路&quot;&gt;&lt;a href=&quot;#基本思路&quot; class=&quot;headerlink&quot; title=&quot;基本思路&quot;&gt;&lt;/a&gt;基本思路&lt;/h2&gt;&lt;p&gt;考虑n的划分。&lt;/p&gt;
&lt;p&gt;记F[n,k]为n的1划分+2划分+…+k划分的数目，则n的划分即为F[n,n]。&lt;/p&gt;
&lt;p&gt;则n的k划分为F[n,k]-F[n,k-1]。&lt;/p&gt;
&lt;p&gt;考虑以下5种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;n=1，显然只能有一个情况，F[1,]=1&lt;/li&gt;
&lt;li&gt;k=1，只有一个划分，F[,1]=1&lt;/li&gt;
&lt;li&gt;n=k，如果划分中有n，则只有一种情况；如果没有n，则最大的数为n-1，此时划分数为F[n,n-1]。因此加起来就是F[n,n]=1+F[n,n-1]&lt;/li&gt;
&lt;li&gt;n&amp;lt;k，显然k不能超过n，因此等价于n=k，F[n,k]=F[n,n]&lt;/li&gt;
&lt;li&gt;n&amp;gt;k，如果有k划分，则等价于F[n-k,k]；否则没有k划分，等价于F[n,k-1]；加起来就是F[n-k,k]+F[n,k-1]。
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Dijkstra单源最短路径</title>
    <link href="http://yoursite.com/2016/04/07/Dijkstra%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2016/04/07/Dijkstra单源最短路径算法/</id>
    <published>2016-04-07T09:39:11.000Z</published>
    <updated>2016-04-07T09:44:00.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;关于最短路径&quot;&gt;&lt;a href=&quot;#关于最短路径&quot; class=&quot;headerlink&quot; title=&quot;关于最短路径&quot;&gt;&lt;/a&gt;关于最短路径&lt;/h2&gt;&lt;p&gt;给定一张图，从一点出发，到达图中所有点的最短路径。&lt;/p&gt;
&lt;p&gt;该性质描述为：如果&lt;code&gt;P(i,j)={Vi....Vk..Vs...Vj}&lt;/code&gt;是从顶点i到j的最短路径，k和s是这条路径上的一个中间顶点，那么P(k,s)必定是从k到s的最短路径。下面证明该性质的正确性。&lt;/p&gt;
&lt;p&gt;假设P&lt;code&gt;(i,j)={Vi....Vk..Vs...Vj}&lt;/code&gt;是从顶点i到j的最短路径，则有&lt;code&gt;P(i,j)=P(i,k)+P(k,s)+P(s,j)&lt;/code&gt;。而P&lt;code&gt;(k,s)&lt;/code&gt;不是从k到s的最短距离，那么必定存在另一条从k到s的最短路径&lt;code&gt;P&amp;#39;(k,s)&lt;/code&gt;，那么&lt;code&gt;P&amp;#39;(i,j)=P(i,k)+P&amp;#39;(k,s)+P(s,j)&amp;lt;P(i,j)&lt;/code&gt;。则与&lt;code&gt;P(i,j)&lt;/code&gt;是从i到j的最短路径相矛盾。因此该性质得证。&lt;/p&gt;
&lt;p&gt;由上述性质可知，如果存在一条从i到j的最短路径&lt;code&gt;(Vi.....Vk,Vj)&lt;/code&gt;，Vk是Vj前面的一顶点。那么&lt;code&gt;(Vi...Vk)&lt;/code&gt;也必定是从i到k的最短路径。为了求出最短路径，Dijkstra就提出了以最短路径长度递增，逐次生成最短路径的算法。譬如对于源顶点V0，首先选择其直接相邻的顶点中长度最短的顶点Vi，那么当前已知可得从V0到达Vj顶点的最短距离&lt;code&gt;dist[j]=min{dist[j],dist[i]+matrix[i][j]}&lt;/code&gt;。根据这种思路，&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设存在&lt;code&gt;G=&amp;lt;V,E&amp;gt;&lt;/code&gt;，源顶点为V0，&lt;code&gt;U={V0}&lt;/code&gt;,&lt;code&gt;dist[i]&lt;/code&gt;记录V0到i的最短距离，&lt;code&gt;path[i]&lt;/code&gt;记录从V0到i路径上的i前面的一个顶点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从V-U中选择使&lt;code&gt;dist[i]&lt;/code&gt;值最小的顶点i，将i加入到U中；&lt;/li&gt;
&lt;li&gt;更新与i直接相邻顶点的dist值。&lt;code&gt;(dist[j]=min{dist[j],dist[i]+matrix[i][j]})&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;直到U=V，停止。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[CODE]&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stack&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Graphs&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; matrix[&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; spots[&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;shortestPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Graphs g, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *dist, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *path, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; v0)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;comment&quot;&gt;// 初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *visited = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[g.n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(visited, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) * g.n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; g.n; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (g.matrix[v0][i] &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; i != v0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           	dist[i] = g.matrix[v0][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           	path[i] = v0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           	dist[i] = INT_MAX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           	path[i] = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	dist[v0] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	path[v0] = v0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	visited[v0] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;comment&quot;&gt;// 重复n-1次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; g.n; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; min = INT_MAX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;comment&quot;&gt;//找出最近的未visit的节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; g.n; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (visited[j] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; dist[j] &amp;lt; min)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               	min = dist[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               	prev = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	visited[prev] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;comment&quot;&gt;// 更新所有节点的距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; g.n; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (visited[j] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; dist[j] &amp;gt; dist[prev] + g.matrix[prev][j] &amp;amp;&amp;amp; g.matrix[prev][j] &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               	dist[j] = g.matrix[prev][j] + dist[prev];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               	path[j] = prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Graphs g, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *path, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; v0, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ve)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;built_in&quot;&gt;stack&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; path_stack;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cur = ve;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; last;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (cur != v0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	path_stack.push(cur);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	cur = path[cur];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; g.spots[v0];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	last = v0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!path_stack.empty())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	cur = path_stack.top();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	path_stack.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;-&amp;gt;(&quot;&lt;/span&gt; &amp;lt;&amp;lt; g.matrix[last][cur] &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;)-&amp;gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; g.spots[cur];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	last = cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N, E, R;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	Graphs park;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; N;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	park.n = N;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; N; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           	park.matrix[i][j] = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	park.matrix[i][i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; park.spots[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; E;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; src, dst;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; src_n = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, dst_n = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	park.e = E;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; E; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; src &amp;gt;&amp;gt; dst &amp;gt;&amp;gt; length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; park.n; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (src == park.spots[j]) src_n = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dst == park.spots[j]) dst_n = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	park.matrix[src_n][dst_n] = length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	park.matrix[dst_n][src_n] = length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; R;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; R; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; src &amp;gt;&amp;gt; dst;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; park.n; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (src == park.spots[j]) src_n = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dst == park.spots[j]) dst_n = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; path[&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;], dist[&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	shortestPath(park, dist, path, src_n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	showPath(park, path, src_n, dst_n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于最短路径&quot;&gt;&lt;a href=&quot;#关于最短路径&quot; class=&quot;headerlink&quot; title=&quot;关于最短路径&quot;&gt;&lt;/a&gt;关于最短路径&lt;/h2&gt;&lt;p&gt;给定一张图，从一点出发，到达图中所有点的最短路径。&lt;/p&gt;
&lt;p&gt;该性质描述为：如果&lt;code&gt;P(i,j)={Vi....Vk..Vs...Vj}&lt;/code&gt;是从顶点i到j的最短路径，k和s是这条路径上的一个中间顶点，那么P(k,s)必定是从k到s的最短路径。下面证明该性质的正确性。&lt;/p&gt;
&lt;p&gt;假设P&lt;code&gt;(i,j)={Vi....Vk..Vs...Vj}&lt;/code&gt;是从顶点i到j的最短路径，则有&lt;code&gt;P(i,j)=P(i,k)+P(k,s)+P(s,j)&lt;/code&gt;。而P&lt;code&gt;(k,s)&lt;/code&gt;不是从k到s的最短距离，那么必定存在另一条从k到s的最短路径&lt;code&gt;P&amp;#39;(k,s)&lt;/code&gt;，那么&lt;code&gt;P&amp;#39;(i,j)=P(i,k)+P&amp;#39;(k,s)+P(s,j)&amp;lt;P(i,j)&lt;/code&gt;。则与&lt;code&gt;P(i,j)&lt;/code&gt;是从i到j的最短路径相矛盾。因此该性质得证。&lt;/p&gt;
&lt;p&gt;由上述性质可知，如果存在一条从i到j的最短路径&lt;code&gt;(Vi.....Vk,Vj)&lt;/code&gt;，Vk是Vj前面的一顶点。那么&lt;code&gt;(Vi...Vk)&lt;/code&gt;也必定是从i到k的最短路径。为了求出最短路径，Dijkstra就提出了以最短路径长度递增，逐次生成最短路径的算法。譬如对于源顶点V0，首先选择其直接相邻的顶点中长度最短的顶点Vi，那么当前已知可得从V0到达Vj顶点的最短距离&lt;code&gt;dist[j]=min{dist[j],dist[i]+matrix[i][j]}&lt;/code&gt;。根据这种思路，&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记8</title>
    <link href="http://yoursite.com/2016/04/07/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/"/>
    <id>http://yoursite.com/2016/04/07/python学习笔记8/</id>
    <published>2016-04-07T08:24:05.000Z</published>
    <updated>2016-04-07T14:04:06.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Python学习笔记–8-I-O&quot;&gt;&lt;a href=&quot;#Python学习笔记–8-I-O&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记–8.I/O&quot;&gt;&lt;/a&gt;Python学习笔记–8.I/O&lt;/h2&gt;&lt;p&gt;2015-07-21&lt;/p&gt;
&lt;p&gt;MrZigZag @ Peking University&lt;/p&gt;
&lt;h3 id=&quot;1-文件&quot;&gt;&lt;a href=&quot;#1-文件&quot; class=&quot;headerlink&quot; title=&quot;1.文件&quot;&gt;&lt;/a&gt;1.文件&lt;/h3&gt;&lt;p&gt;Python内置读写文件的函数，用法与C类似。读写文件一般都是请求操作系统打开一个文件对象，然后通过操作系统的借口从这个文件对象读写数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读文件&lt;/strong&gt;，使用内置的&lt;code&gt;open()&lt;/code&gt;函数，传入文件名和读写标识符。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f = open(&amp;apos;file_name&amp;apos;, &amp;apos;r&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调用&lt;code&gt;read()&lt;/code&gt;方法可以一次性读取全部内容存放到一个str中，最后调用&lt;code&gt;close()&lt;/code&gt;关闭文件。文件使用完毕之后必须关闭。每次都写&lt;code&gt;close()&lt;/code&gt;并不方便，Python提供了&lt;code&gt;with&lt;/code&gt;语句自动调用&lt;code&gt;close()&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with open(&amp;apos;file_name&amp;apos;, &amp;apos;r&amp;apos;) as f:
    str = f.read()
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;与Java类似，Python要求读文件时要调用&lt;code&gt;try-except&lt;/code&gt;机制来处理可能会出现的问题。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try:
    f = open(&amp;apos;file_name&amp;apos;, &amp;apos;r&amp;apos;)
    str = f.read()
finally:
    if f:
        f.close()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;读文件还可以使用&lt;code&gt;read(size)&lt;/code&gt;每次读取size字节的内容，或者用&lt;code&gt;readline()&lt;/code&gt;读取一行，还可以用&lt;code&gt;readlines()&lt;/code&gt;一次读取所有行并生成一个list。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读二进制文件&lt;/strong&gt;，用&lt;code&gt;rb&lt;/code&gt;模式打开文件即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with open(file_name, &amp;apos;rb&amp;apos;) as f:
    u_str = f.read()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一般而言，读取非Ascii编码的文本文件都是先用二进制打开，读取再解码。Python提供&lt;code&gt;codecs&lt;/code&gt;模块处理读文件时的自动编码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import codecs
with codecs.open(file_name, &amp;apos;r&amp;apos;, &amp;apos;gbk&amp;apos;) as f:
    f.read()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;写文件&lt;/strong&gt;，与读文件类似，区别在于用了&lt;code&gt;write()&lt;/code&gt;，使用标识符&lt;code&gt;w&lt;/code&gt;或者&lt;code&gt;wb&lt;/code&gt;。同时可使用&lt;code&gt;with&lt;/code&gt;。要写入特定编码的文件，可以使用&lt;code&gt;codecs&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;2-操作文件和目录&quot;&gt;&lt;a href=&quot;#2-操作文件和目录&quot; class=&quot;headerlink&quot; title=&quot;2.操作文件和目录&quot;&gt;&lt;/a&gt;2.操作文件和目录&lt;/h3&gt;&lt;p&gt;Python内置了&lt;code&gt;os&lt;/code&gt;模块，可以直接调用操作系统提供的接口函数。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; os.name
&amp;apos;posix&amp;apos;

&amp;gt;&amp;gt;&amp;gt; os.uname() #操作系统的详细信息
(&amp;apos;Darwin&amp;apos;, &amp;apos;MrZigZagdeMacBook-Pro.local&amp;apos;, &amp;apos;14.4.0&amp;apos;, &amp;apos;Darwin Kernel Version 14.4.0: Thu May 28 11:35:04 PDT 2015; root:xnu-2782.30.5~1/RELEASE_X86_64&amp;apos;, &amp;apos;x86_64&amp;apos;)

&amp;gt;&amp;gt;&amp;gt; os.environ #环境变量
{&amp;apos;VERSIONER_PYTHON_PREFER_32_BIT&amp;apos;: &amp;apos;no&amp;apos;, &amp;apos;TERM_PROGRAM_VERSION&amp;apos;: &amp;apos;326&amp;apos;, &amp;apos;LOGNAME&amp;apos;: &amp;apos;michael&amp;apos;, &amp;apos;USER&amp;apos;: &amp;apos;michael&amp;apos;, &amp;apos;PATH&amp;apos;: &amp;apos;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/mysql/bin&amp;apos;, ...}

&amp;gt;&amp;gt;&amp;gt; os.getenv(&amp;apos;PATH&amp;apos;) #获取环境变量的值
&amp;apos;/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin:/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/bin&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;操作文件和目录的函数放在&lt;code&gt;os&lt;/code&gt;和&lt;code&gt;os.path&lt;/code&gt;模块中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; os.path.abspath(&amp;apos;.&amp;apos;) # 当前目录的绝对路径
&amp;apos;/Users/mrzigzag&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将两个路径组合时，根据操作系统的差异性，一般不要直接拼接字符串，最好用&lt;code&gt;os.path.join()&lt;/code&gt;函数，这样可以处理不同操作系统的路径分隔符。&lt;/p&gt;
&lt;p&gt;拆分路径时用&lt;code&gt;os.path.split()&lt;/code&gt;可以将路径拆分成 两个部分，最后一个部分总是最后级别的目录或者文件名。得到文件扩展名&lt;code&gt;os.path.splitext()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;创建目录&lt;code&gt;os.mkdir(dir)&lt;/code&gt;，删除目录&lt;code&gt;os.rmdir(dir)&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; os.path.join(&amp;apos;/Users/mrzigzag&amp;apos;, &amp;apos;testdir&amp;apos;)
&amp;apos;/Users/mrzigzag/testdir&amp;apos;
&amp;gt;&amp;gt;&amp;gt; os.mkdir(&amp;apos;/Users/mrzigzag/testdir&amp;apos;)
&amp;gt;&amp;gt;&amp;gt; os.rmdir(&amp;apos;/Users/mrzigzag/testdir&amp;apos;)
&amp;gt;&amp;gt;&amp;gt; os.path.split(&amp;apos;/Users/mrzigzag/testdir&amp;apos;)
(&amp;apos;/Users/mrzigzag&amp;apos;, &amp;apos;testdir&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重命名&lt;code&gt;os.rename(name.old, name.new)&lt;/code&gt;，删除&lt;code&gt;os.remove(file)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;复制文件需要&lt;code&gt;shutil&lt;/code&gt;模块提供的&lt;code&gt;copyfile()&lt;/code&gt;函数。&lt;/p&gt;
&lt;p&gt;利用Python的特性对文件目录进行批量操作，例如列出所有文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; [x for x in os.listdir(&amp;apos;.&amp;apos;) if not os.path.isdir(x)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要列出所有&lt;code&gt;.jpg&lt;/code&gt;文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; [x for x in os.listdir(&amp;apos;.&amp;apos;) if x not os.path.isdir(x) and os.path.splitext(x)[1] == &amp;apos;.jpg&amp;apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-序列化&quot;&gt;&lt;a href=&quot;#3-序列化&quot; class=&quot;headerlink&quot; title=&quot;3.序列化&quot;&gt;&lt;/a&gt;3.序列化&lt;/h3&gt;&lt;p&gt;把变量从内存中变成可存储或者可传输的过程称为序列化。反之称为反序列化。&lt;/p&gt;
&lt;p&gt;Python提供两个模块来实现序列化，&lt;code&gt;cPickle&lt;/code&gt;和&lt;code&gt;pickle&lt;/code&gt;，功能一样，但是&lt;code&gt;cPickle&lt;/code&gt;用c写，速度快，一般优先调用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try:
    import cPickle as pickle
except ImportError:
    import pickle
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将对象写到文件。可以用&lt;code&gt;pickle.dumps()&lt;/code&gt;方法将任意对象序列化成为一个str，然后将该str写入到文件。或者用&lt;code&gt;pickle.dump()&lt;/code&gt;直接将对象序列化后写入到一个file-like Object。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with open(&amp;apos;file_name&amp;apos;, &amp;apos;wb&amp;apos;) as f:
    pickle.dump(d, f)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;读入同理，&lt;code&gt;pickle.loads()&lt;/code&gt;是从字符串读入，&lt;code&gt;pickle.load()&lt;/code&gt;则是从file-like Object直接读入。&lt;/p&gt;
&lt;p&gt;Pickle的问题主要是保存的格式只适合Python，不同版本的Python可能都不兼容。如果有更加通用的序列化需求，用&lt;code&gt;json&lt;/code&gt;格式才是一个比较好的选择。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JSON&lt;/strong&gt;是标准的Javascript对象，表示出来就是一个字符串，可以被所有语言读取，也方便存储和传输。&lt;/p&gt;
&lt;p&gt;Python内置了&lt;code&gt;json&lt;/code&gt;模块提供了完善的Python对象到JSON格式的转换，内置的序列化函数和反序列化函数与pickle类似。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import json
&amp;gt;&amp;gt;&amp;gt; d = dict(name=&amp;apos;Bob&amp;apos;, age=20, score=88)
&amp;gt;&amp;gt;&amp;gt; json.dumps(d)
&amp;apos;{&amp;quot;age&amp;quot;: 20, &amp;quot;score&amp;quot;: 88, &amp;quot;name&amp;quot;: &amp;quot;Bob&amp;quot;}&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要注意的一点是反序列化得到的所有字符串对象都是&lt;code&gt;unicode&lt;/code&gt;而不是&lt;code&gt;str&lt;/code&gt;，因为JSON标准规定的编码是UTF-8。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json&lt;/code&gt;模块支持直接将Python的基本数据类型转换到JSON，对于自定义的类则需要用转换函数进行转换。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import json
class Student(object):
    def __init__(self, name, age, score):
    self.name = name
    self.age = age
    self.score = score

s = Student(&amp;apos;Bob&amp;apos;, 20, 88)
print(json.dumps(s))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行会得到一个&lt;code&gt;TypeError&lt;/code&gt;，因为Student不是一个可序列化为JSON的对象。利用可选参数&lt;code&gt;default&lt;/code&gt;，写一个转换函数即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def studetn2dict(std):
    return {
        &amp;apos;name&amp;apos;: std.name,
        &amp;apos;age&amp;apos;: std.age,
        &amp;apos;score&amp;apos;: std.score
    }

print(json.dumps(s, default=student2dict))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;遇到其他子类的实例时可能会无法转换，因而可以直接利用class中得&lt;code&gt;__dict__&lt;/code&gt;属性，它就是一个用来存储实例变量的&lt;code&gt;dict&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(json.dumps(s, default=lambda obj: ojb.__dict__))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;反序列化则是先用&lt;code&gt;json.loads()&lt;/code&gt;将JSON转换成一个&lt;code&gt;dict&lt;/code&gt;，然后传入&lt;code&gt;object_hook&lt;/code&gt;将dict转换成具体的实例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def dict2student(d):
    return Student(d[&amp;apos;name&amp;apos;], d[&amp;apos;age&amp;apos;], d[&amp;apos;score])

json_str = &amp;apos;{&amp;quot;age&amp;quot;: 20, &amp;quot;score&amp;quot;: 88, &amp;quot;name&amp;quot;: &amp;quot;Bob&amp;quot;}&amp;apos;
print(json.loads(json_str, object_hook=dict2student))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关于&lt;code&gt;json.dumps()&lt;/code&gt;方法提供的可选参数，可以参考&lt;a href=&quot;https://docs.python.org/2/library/json.html#json.dumps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python学习笔记–8-I-O&quot;&gt;&lt;a href=&quot;#Python学习笔记–8-I-O&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记–8.I/O&quot;&gt;&lt;/a&gt;Python学习笔记–8.I/O&lt;/h2&gt;&lt;p&gt;2015-07-21&lt;/p&gt;
&lt;p&gt;MrZigZag @ Peking University&lt;/p&gt;
&lt;h3 id=&quot;1-文件&quot;&gt;&lt;a href=&quot;#1-文件&quot; class=&quot;headerlink&quot; title=&quot;1.文件&quot;&gt;&lt;/a&gt;1.文件&lt;/h3&gt;&lt;p&gt;Python内置读写文件的函数，用法与C类似。读写文件一般都是请求操作系统打开一个文件对象，然后通过操作系统的借口从这个文件对象读写数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读文件&lt;/strong&gt;，使用内置的&lt;code&gt;open()&lt;/code&gt;函数，传入文件名和读写标识符。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f = open(&amp;apos;file_name&amp;apos;, &amp;apos;r&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调用&lt;code&gt;read()&lt;/code&gt;方法可以一次性读取全部内容存放到一个str中，最后调用&lt;code&gt;close()&lt;/code&gt;关闭文件。文件使用完毕之后必须关闭。每次都写&lt;code&gt;close()&lt;/code&gt;并不方便，Python提供了&lt;code&gt;with&lt;/code&gt;语句自动调用&lt;code&gt;close()&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with open(&amp;apos;file_name&amp;apos;, &amp;apos;r&amp;apos;) as f:
    str = f.read()
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记7</title>
    <link href="http://yoursite.com/2016/04/07/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/"/>
    <id>http://yoursite.com/2016/04/07/python学习笔记7/</id>
    <published>2016-04-07T08:23:05.000Z</published>
    <updated>2016-04-07T14:03:47.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Python学习笔记–7-Exceptions-and-debugging&quot;&gt;&lt;a href=&quot;#Python学习笔记–7-Exceptions-and-debugging&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记–7.Exceptions and debugging&quot;&gt;&lt;/a&gt;Python学习笔记–7.Exceptions and debugging&lt;/h2&gt;&lt;p&gt;MrZigZag @ Peking Universty&lt;/p&gt;
&lt;p&gt;2015-07-20&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-异常处理&quot;&gt;&lt;a href=&quot;#1-异常处理&quot; class=&quot;headerlink&quot; title=&quot;1.异常处理&quot;&gt;&lt;/a&gt;1.异常处理&lt;/h3&gt;&lt;p&gt;高级语言一般面对异常都会内置一套&lt;code&gt;try-catch-finally&lt;/code&gt;机制。Python相应的机制是&lt;code&gt;try-except-finally&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当我们认为某些代码可能会出错时，可以用&lt;code&gt;try&lt;/code&gt;块来运行这段代码，运行出错时会立即跳转到&lt;code&gt;except&lt;/code&gt;块，执行完之后跳出，如果有&lt;code&gt;finally&lt;/code&gt;块则执行，否则中断程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误&lt;/strong&gt;有许多种，例如&lt;code&gt;ValueError&lt;/code&gt;、&lt;code&gt;ZeroDivisionError&lt;/code&gt;等，面对不同的错误应该由不同的&lt;code&gt;except&lt;/code&gt;块来处理。Python的错误都是类，继承自&lt;code&gt;BaseException&lt;/code&gt;，因此使用&lt;code&gt;catch&lt;/code&gt;块时应注意范围，基类应该放在后面，否则会出现后面的错误被前面的处理这种情况。（反正这个在Java会报错，Python应该不会。）&lt;/p&gt;
&lt;p&gt;如果没用&lt;code&gt;try-except-finally&lt;/code&gt;机制，则出现错误时会根据堆栈逐步上传，直到&lt;code&gt;__main__&lt;/code&gt;。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;raise&lt;/code&gt;语句抛出错误，一般只有在必要的时候才会定义自己的错误类型。尽量选择Python内置的错误类型。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class FooError(StandardError):
    pass

def foo(s):
    n = (int)s
    if n == 0:
        raise FooError(&amp;apos;invalid value:%s&amp;apos; % s)
    return 10 / n
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;raise&lt;/code&gt;语句如果不带参数，会把当前的错误原样抛出，方便上一层进行处理。在&lt;code&gt;except&lt;/code&gt;块中，还可以&lt;code&gt;raise&lt;/code&gt;一个error然后将一种类型的错误转换成另一种错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;logging&lt;/strong&gt;，记录错误堆栈并让程序继续执行下去。利用&lt;code&gt;logging&lt;/code&gt;模块可以非常容易记录错误信息。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import logging
def foo(s):
    return 10 / int(s)
def bar(s):
    return foo(s) * 2

def main():
    try:
        bar(&amp;apos;0&amp;apos;)
    except StandardError, e:
        logging.exception(e)

main()
print &amp;apos;END&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;会出错，但是程序会打印错误信息，之后继续执行。&lt;/p&gt;
&lt;p&gt;通过配置，还可以将logging写入到文件里，方便时候排查。&lt;/p&gt;
&lt;h3 id=&quot;2-调试&quot;&gt;&lt;a href=&quot;#2-调试&quot; class=&quot;headerlink&quot; title=&quot;2.调试&quot;&gt;&lt;/a&gt;2.调试&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;断言&lt;/strong&gt;，&lt;code&gt;assert&lt;/code&gt;语句判断是否成立，如果断言失败就会抛出&lt;code&gt;AssertError&lt;/code&gt;并且终止程序。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def foo(s):
    n = (int)s
    assert n != 0, &amp;apos;n is zero!&amp;apos;
    return 10 / n
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;启动Python解释器时可以用&lt;code&gt;-O&lt;/code&gt;参数来关闭&lt;code&gt;assert&lt;/code&gt;。之后解释器会将&lt;code&gt;assert&lt;/code&gt;语句当做&lt;code&gt;pass&lt;/code&gt;来看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;logging&lt;/strong&gt;，与&lt;code&gt;assert&lt;/code&gt;相比，&lt;code&gt;logging&lt;/code&gt;不会抛出错误，还可以输出到文件，而且&lt;code&gt;logging&lt;/code&gt;还可以根据不同的配置指定记录信息的级别，有&lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;WARNING&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;四个级别，指定级别时，低级的级别就会失效。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import logging
logging.basicConfig(level=logging.INFO)

logging.info(&amp;apos;Test Logging&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;PDB&lt;/strong&gt;，利用pdb可以逐行执行，也可以调用&lt;code&gt;pdb.set_trace()&lt;/code&gt;设置断点。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python学习笔记–7-Exceptions-and-debugging&quot;&gt;&lt;a href=&quot;#Python学习笔记–7-Exceptions-and-debugging&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记–7.Exceptions and debugging&quot;&gt;&lt;/a&gt;Python学习笔记–7.Exceptions and debugging&lt;/h2&gt;&lt;p&gt;MrZigZag @ Peking Universty&lt;/p&gt;
&lt;p&gt;2015-07-20&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-异常处理&quot;&gt;&lt;a href=&quot;#1-异常处理&quot; class=&quot;headerlink&quot; title=&quot;1.异常处理&quot;&gt;&lt;/a&gt;1.异常处理&lt;/h3&gt;&lt;p&gt;高级语言一般面对异常都会内置一套&lt;code&gt;try-catch-finally&lt;/code&gt;机制。Python相应的机制是&lt;code&gt;try-except-finally&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当我们认为某些代码可能会出错时，可以用&lt;code&gt;try&lt;/code&gt;块来运行这段代码，运行出错时会立即跳转到&lt;code&gt;except&lt;/code&gt;块，执行完之后跳出，如果有&lt;code&gt;finally&lt;/code&gt;块则执行，否则中断程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误&lt;/strong&gt;有许多种，例如&lt;code&gt;ValueError&lt;/code&gt;、&lt;code&gt;ZeroDivisionError&lt;/code&gt;等，面对不同的错误应该由不同的&lt;code&gt;except&lt;/code&gt;块来处理。Python的错误都是类，继承自&lt;code&gt;BaseException&lt;/code&gt;，因此使用&lt;code&gt;catch&lt;/code&gt;块时应注意范围，基类应该放在后面，否则会出现后面的错误被前面的处理这种情况。（反正这个在Java会报错，Python应该不会。）&lt;/p&gt;
&lt;p&gt;如果没用&lt;code&gt;try-except-finally&lt;/code&gt;机制，则出现错误时会根据堆栈逐步上传，直到&lt;code&gt;__main__&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记6</title>
    <link href="http://yoursite.com/2016/04/07/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/"/>
    <id>http://yoursite.com/2016/04/07/python学习笔记6/</id>
    <published>2016-04-07T08:22:05.000Z</published>
    <updated>2016-04-07T09:44:50.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Python学习笔记—6正则表达式&quot;&gt;&lt;a href=&quot;#Python学习笔记—6正则表达式&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记—6正则表达式&quot;&gt;&lt;/a&gt;Python学习笔记—6正则表达式&lt;/h2&gt;&lt;p&gt;MrZigZag @ Peking University&lt;/p&gt;
&lt;p&gt;2015-07-18&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-正则表达式&quot;&gt;&lt;a href=&quot;#1-正则表达式&quot; class=&quot;headerlink&quot; title=&quot;1.正则表达式&quot;&gt;&lt;/a&gt;1.正则表达式&lt;/h3&gt;&lt;p&gt;正则表达式使用一种描述性的语言给字符串定义一个规则，只有符合规则的字符串才能认为是匹配，否则该字符串就是不合法的。&lt;/p&gt;
&lt;h3 id=&quot;2-精确匹配&quot;&gt;&lt;a href=&quot;#2-精确匹配&quot; class=&quot;headerlink&quot; title=&quot;2.精确匹配&quot;&gt;&lt;/a&gt;2.精确匹配&lt;/h3&gt;&lt;p&gt;如果直接给出字符就是精确匹配。用&lt;code&gt;\d&lt;/code&gt;可以匹配一个数字，&lt;code&gt;\w&lt;/code&gt;匹配一个字母或者一个数字。&lt;code&gt;.&lt;/code&gt;可以匹配任意字符，&lt;code&gt;\s&lt;/code&gt;匹配一个空格或者Tab等空白符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;12\d&lt;/code&gt;可以匹配&lt;code&gt;123&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w\w\w&lt;/code&gt;可以匹配&lt;code&gt;www&lt;/code&gt;也可以匹配&lt;code&gt;py3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;py.&lt;/code&gt;可以匹配&lt;code&gt;py3&lt;/code&gt;，&lt;code&gt;pyx&lt;/code&gt;等。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-变长字符匹配&quot;&gt;&lt;a href=&quot;#3-变长字符匹配&quot; class=&quot;headerlink&quot; title=&quot;3.变长字符匹配&quot;&gt;&lt;/a&gt;3.变长字符匹配&lt;/h3&gt;&lt;p&gt;正则表达式中，用&lt;code&gt;*&lt;/code&gt;表示任意个字符，用&lt;code&gt;+&lt;/code&gt;表示至少一个字符，用&lt;code&gt;?&lt;/code&gt;表示0个或者1个字符，用&lt;code&gt;{n}&lt;/code&gt;表示n个字符，&lt;code&gt;{n, m}&lt;/code&gt;表示n到m个字符。&lt;/p&gt;
&lt;p&gt;例如&lt;code&gt;\d{3}\s+\d{3,8}&lt;/code&gt;，&lt;code&gt;\d{3}&lt;/code&gt;表示3个数字，&lt;code&gt;\s&lt;/code&gt;表示一个空格，所以&lt;code&gt;\s+&lt;/code&gt;表示至少有一个空格，&lt;code&gt;\d{3,8}&lt;/code&gt;表示有3-8个数字。因而该正则表达式可以匹配用空格隔开的电话号码。&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;010-62767007&lt;/code&gt;之类中间有&lt;code&gt;-&lt;/code&gt;的电话号码，因为&lt;code&gt;-&lt;/code&gt;是特殊字符，需要转义，可以表示为&lt;code&gt;\d{3}\-\d{3,8}&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;4-范围匹配&quot;&gt;&lt;a href=&quot;#4-范围匹配&quot; class=&quot;headerlink&quot; title=&quot;4.范围匹配&quot;&gt;&lt;/a&gt;4.范围匹配&lt;/h3&gt;&lt;p&gt;变长字符串无法解决&lt;code&gt;010 - 62767007&lt;/code&gt;之类带有空格又带有&lt;code&gt;-&lt;/code&gt;的字符串，需要引入&lt;code&gt;[]&lt;/code&gt;表示范围。范围的使用示例。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[0-9]&lt;/code&gt;表示数字，&lt;code&gt;[a-z]&lt;/code&gt;表示小写字母。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0-9a-zA-Z\_]&lt;/code&gt;表示一个数字、字母或者下划线。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0-9a-zA-Z\_]+&lt;/code&gt;表示至少由一个数字、字母或者下划线组成的字符串。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-zA-Z][0-9a-zA-Z\_]*&lt;/code&gt;匹配以字母开头后接任何数字、字母或者下划线的字符串。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-zA-Z][0-9a-zA-Z]{0, 9}&lt;/code&gt;匹配以一个字母开头，后接0-9个数字、字母或者下划线的字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-特殊符号&quot;&gt;&lt;a href=&quot;#5-特殊符号&quot; class=&quot;headerlink&quot; title=&quot;5.特殊符号&quot;&gt;&lt;/a&gt;5.特殊符号&lt;/h3&gt;&lt;p&gt;&lt;code&gt;A|B&lt;/code&gt;表示可以匹配A或者B，&lt;code&gt;[P|p]ython&lt;/code&gt;可以匹配&lt;code&gt;Python&lt;/code&gt;或者&lt;code&gt;python&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^&lt;/code&gt;表示行的开头，&lt;code&gt;^\d&lt;/code&gt;表示必须以数字开头。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$&lt;/code&gt;表示行的结束，&lt;code&gt;\d$&lt;/code&gt;表示必须以数字结束。&lt;/p&gt;
&lt;p&gt;完全精确匹配可能会匹配比它长的字符串，例如&lt;code&gt;py&lt;/code&gt;可以匹配&lt;code&gt;python&lt;/code&gt;，要使&lt;code&gt;py&lt;/code&gt;只能匹配&lt;code&gt;py&lt;/code&gt;，可以加上&lt;code&gt;^&lt;/code&gt;和&lt;code&gt;$&lt;/code&gt;变成整行匹配，表示为&lt;code&gt;^py$&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;6-使用re模块&quot;&gt;&lt;a href=&quot;#6-使用re模块&quot; class=&quot;headerlink&quot; title=&quot;6.使用re模块&quot;&gt;&lt;/a&gt;6.使用re模块&lt;/h3&gt;&lt;p&gt;Python提供re模块，包含所有正则表达式的功能。因为Python的字符串本身就用&lt;code&gt;\&lt;/code&gt;转义，与正则表达式产生冲突，因而一般使用Python的&lt;code&gt;r&lt;/code&gt;前缀表示正则表达式，这样就不用考虑转义的问题了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;match()&lt;/code&gt;方法判断匹配是否成功，成功返回一个&lt;code&gt;Match&lt;/code&gt;对象，否则返回一个&lt;code&gt;None&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test_re = r&amp;apos;^\d{3}\-\d{3,8}$`
test_str = &amp;apos;010-62767007`
if re.match(test_re, test_str):
    do something
else:
    do other things
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;7-切分字符串&quot;&gt;&lt;a href=&quot;#7-切分字符串&quot; class=&quot;headerlink&quot; title=&quot;7.切分字符串&quot;&gt;&lt;/a&gt;7.切分字符串&lt;/h3&gt;&lt;p&gt;用正则表达式切分字符串比用固定的字符更加灵活。&lt;/p&gt;
&lt;p&gt;一般的切分无法识别连续的空格。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &amp;apos;a b   c&amp;apos;.split(&amp;apos; &amp;apos;)
[&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;, &amp;apos;&amp;apos;, &amp;apos;&amp;apos;, &amp;apos;c&amp;apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用正则表达式就可以解决这个问题。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; re.split(r&amp;apos;\s+&amp;apos;, &amp;apos;a b   c&amp;apos;)
[&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;, &amp;apos;c&amp;apos;]
&amp;gt;&amp;gt;&amp;gt; re.split(r&amp;apos;[\s\,]+&amp;apos;, &amp;apos;a b,,,,  c  &amp;apos;)
[&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;, &amp;apos;c&amp;apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用正则表达式切分可以将用户输入的不规范的标签转化为正确的数组。&lt;/p&gt;
&lt;h3 id=&quot;8-分组&quot;&gt;&lt;a href=&quot;#8-分组&quot; class=&quot;headerlink&quot; title=&quot;8.分组&quot;&gt;&lt;/a&gt;8.分组&lt;/h3&gt;&lt;p&gt;除了简单判断字符串是否匹配外，正则表达式还能提取字符串的子串。用&lt;code&gt;()&lt;/code&gt;表示要提取的分组，可以直接从目标字符串中提取出需要的子串。&lt;/p&gt;
&lt;p&gt;例如要从010-62767007提取出区号和电话号码，可以定义为&lt;code&gt;^(\d{3,4})\-(\d{7,8})$&lt;/code&gt;，得到的子串存储为一组&lt;code&gt;group&lt;/code&gt;，其中&lt;code&gt;group(0)&lt;/code&gt;为源字符串。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; m = re.match(r&amp;apos;^(\d{3,4})\-(\d{7,8})$&amp;apos;, &amp;apos;010-62767007&amp;apos;)
&amp;gt;&amp;gt;&amp;gt; m.group(0)
&amp;apos;010-62767007&amp;apos;
&amp;gt;&amp;gt;&amp;gt; m.group(1)
&amp;apos;010&amp;apos;
&amp;gt;&amp;gt;&amp;gt; m.group(2)
&amp;apos;62767007&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如给定一个时间，判断是否合法并提取出时分秒。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; t_re = r&amp;apos;^(0[0-9]|1[0-9]|2[0-3]|[3-9])\:([0-5][0-9])\:([0-5][0-9])$&amp;apos;
&amp;gt;&amp;gt;&amp;gt; m.re.match(t_re, &amp;apos;19:05:23&amp;apos;)
&amp;gt;&amp;gt;&amp;gt; m.group(1)
&amp;apos;19&amp;apos;
&amp;gt;&amp;gt;&amp;gt; m.group(2)
&amp;apos;05&amp;apos;
&amp;gt;&amp;gt;&amp;gt; m.group(3)
&amp;apos;23&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是这个例子比较难识别日期，因为每个月的天数之间存在差异。&lt;/p&gt;
&lt;h3 id=&quot;9-贪婪匹配&quot;&gt;&lt;a href=&quot;#9-贪婪匹配&quot; class=&quot;headerlink&quot; title=&quot;9.贪婪匹配&quot;&gt;&lt;/a&gt;9.贪婪匹配&lt;/h3&gt;&lt;p&gt;正则表达式默认使用贪婪匹配，因此会尽量匹配尽可能多的字符，有时候会导致使用&lt;code&gt;+&lt;/code&gt;时会出现问题，这时候需要引入非贪婪匹配，一般来说只需在&lt;code&gt;+&lt;/code&gt;后面加一个&lt;code&gt;?&lt;/code&gt;即可。例如用&lt;code&gt;^(\d+)(0*)$&lt;/code&gt;匹配就无法提取出&lt;code&gt;102401&lt;/code&gt;后面的01，可以改为&lt;code&gt;^(\d+?)(0*)$&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;10-编译&quot;&gt;&lt;a href=&quot;#10-编译&quot; class=&quot;headerlink&quot; title=&quot;10.编译&quot;&gt;&lt;/a&gt;10.编译&lt;/h3&gt;&lt;p&gt;使用正则表达式时，Python解释器内部会先编译正则表达式然后用编译好的表达式去匹配字符串。如果一个正则表达式要使用多次，可以先执行编译，接下来重复使用就不用编译了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; re_time = re.compile(r&amp;apos;^(0[0-9]|1[0-9]|2[0-3]|[3-9])\:([0-5][0-9])\:([0-5][0-9])$&amp;apos;)
&amp;gt;&amp;gt;&amp;gt; re_time.match(&amp;apos;20:14:59&amp;apos;).group(3)
&amp;apos;59&amp;apos;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python学习笔记—6正则表达式&quot;&gt;&lt;a href=&quot;#Python学习笔记—6正则表达式&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记—6正则表达式&quot;&gt;&lt;/a&gt;Python学习笔记—6正则表达式&lt;/h2&gt;&lt;p&gt;MrZigZag @ Peking University&lt;/p&gt;
&lt;p&gt;2015-07-18&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-正则表达式&quot;&gt;&lt;a href=&quot;#1-正则表达式&quot; class=&quot;headerlink&quot; title=&quot;1.正则表达式&quot;&gt;&lt;/a&gt;1.正则表达式&lt;/h3&gt;&lt;p&gt;正则表达式使用一种描述性的语言给字符串定义一个规则，只有符合规则的字符串才能认为是匹配，否则该字符串就是不合法的。&lt;/p&gt;
&lt;h3 id=&quot;2-精确匹配&quot;&gt;&lt;a href=&quot;#2-精确匹配&quot; class=&quot;headerlink&quot; title=&quot;2.精确匹配&quot;&gt;&lt;/a&gt;2.精确匹配&lt;/h3&gt;&lt;p&gt;如果直接给出字符就是精确匹配。用&lt;code&gt;\d&lt;/code&gt;可以匹配一个数字，&lt;code&gt;\w&lt;/code&gt;匹配一个字母或者一个数字。&lt;code&gt;.&lt;/code&gt;可以匹配任意字符，&lt;code&gt;\s&lt;/code&gt;匹配一个空格或者Tab等空白符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;12\d&lt;/code&gt;可以匹配&lt;code&gt;123&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w\w\w&lt;/code&gt;可以匹配&lt;code&gt;www&lt;/code&gt;也可以匹配&lt;code&gt;py3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;py.&lt;/code&gt;可以匹配&lt;code&gt;py3&lt;/code&gt;，&lt;code&gt;pyx&lt;/code&gt;等。
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记5</title>
    <link href="http://yoursite.com/2016/04/07/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/"/>
    <id>http://yoursite.com/2016/04/07/python学习笔记5/</id>
    <published>2016-04-07T08:21:05.000Z</published>
    <updated>2016-04-07T14:03:30.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Python学习笔记–5-面向对象编程&quot;&gt;&lt;a href=&quot;#Python学习笔记–5-面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记–5.面向对象编程&quot;&gt;&lt;/a&gt;Python学习笔记–5.面向对象编程&lt;/h2&gt;&lt;p&gt;MrZigZag @ Peking University&lt;/p&gt;
&lt;p&gt;2015-07-17&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1.定义&quot;&gt;&lt;/a&gt;1.定义&lt;/h3&gt;&lt;p&gt;通过&lt;code&gt;class&lt;/code&gt;关键字定义类，父类&lt;code&gt;(object)&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class MyClass(object):
    pass
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;没有合适的继承类时可以使用&lt;code&gt;object&lt;/code&gt;类，这是所有的类都会继承的类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自由绑定&lt;/strong&gt;，Python是动态语言，可以在运行过程中实时地给实例&lt;code&gt;instance&lt;/code&gt;绑定新的属性，同时还可以绑定新的方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; ins1 = MyClass()
&amp;gt;&amp;gt;&amp;gt; ins1.name = &amp;apos;Test&amp;apos;

def set_age(self, age):
    self.age = age
from types inport MethodType
s = Student()
s.set_age = MethodType(set_age, s, Student)
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;，类的初始化方法是&lt;code&gt;__init__(self, args)&lt;/code&gt;，任何方法第一个参数都是&lt;code&gt;self&lt;/code&gt;，但是使用时不需要传进去。&lt;/p&gt;
&lt;h3 id=&quot;2-访问限制&quot;&gt;&lt;a href=&quot;#2-访问限制&quot; class=&quot;headerlink&quot; title=&quot;2.访问限制&quot;&gt;&lt;/a&gt;2.访问限制&lt;/h3&gt;&lt;p&gt;属性名称加上&lt;code&gt;__&lt;/code&gt;表示private，&lt;code&gt;__prop&lt;/code&gt;会被解释器解释成&lt;code&gt;_Classname__prop&lt;/code&gt;，要访问&lt;code&gt;__prop&lt;/code&gt;可以写&lt;code&gt;__Classname__prop&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;双下划线开头双下划线结尾的属性属于特殊变量，可以访问，一般不能使用这个命名方法。&lt;/p&gt;
&lt;p&gt;单下划线开头的变量可以访问，但是一般被视为private变量。&lt;/p&gt;
&lt;h3 id=&quot;3-继承和多态&quot;&gt;&lt;a href=&quot;#3-继承和多态&quot; class=&quot;headerlink&quot; title=&quot;3.继承和多态&quot;&gt;&lt;/a&gt;3.继承和多态&lt;/h3&gt;&lt;p&gt;继承之后，子类的方法会覆盖父类的方法。&lt;/p&gt;
&lt;p&gt;多态保证了只需要知道父类，并不需要确切的子类就可以放心的使用父类中的方法。因而调用方只管调用不管细节。符合“开闭原则”。&lt;code&gt;对扩展开放，对修改封闭&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Animal(object):
    def run(self):
        print &amp;apos;Animal is running!&amp;apos;
class Dog(Animal):
    def run(self):
        print &amp;apos;Dog is runnning!&amp;apos;
def run_twice(animal):
    animal.run()
    animal.run()

&amp;gt;&amp;gt;&amp;gt; run_twice(Animal())
Animal is running!
Animal is running!
&amp;gt;&amp;gt;&amp;gt; run_twice(Dog())
Dog is running!
Dog is running!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据多态的性质，任何时候最好都要使用继承，如果没有合适的父类则直接继承&lt;code&gt;object&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;4-获取对象信息&quot;&gt;&lt;a href=&quot;#4-获取对象信息&quot; class=&quot;headerlink&quot; title=&quot;4.获取对象信息&quot;&gt;&lt;/a&gt;4.获取对象信息&lt;/h3&gt;&lt;p&gt;拿到一个对象的引用时，需要确定对象的类型和包含的方法。可以使用多种方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用type()&lt;/strong&gt;，基本类型都可以使用&lt;code&gt;type()&lt;/code&gt;函数判断。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; type(1)
&amp;lt;type &amp;apos;int&amp;apos;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(&amp;apos;hello&amp;apos;)
&amp;lt;type &amp;apos;str&amp;apos;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(None)
&amp;lt;type &amp;apos;NoneType&amp;apos;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(abs)
&amp;lt;type &amp;apos;builtin_function or method&amp;apos;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(Animal())
&amp;lt;type &amp;apos;__main__.Animal&amp;apos;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;type()&lt;/code&gt;函数返回&lt;code&gt;type&lt;/code&gt;类型，Python把每种type类型都定义好了常量，放在&lt;code&gt;types&lt;/code&gt;模块中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import types
&amp;gt;&amp;gt;&amp;gt; type(&amp;apos;abc&amp;apos;) == types.StringType
True
&amp;gt;&amp;gt;&amp;gt; type(u&amp;apos;abc&amp;apos;) == types.UnicodeType
True
&amp;gt;&amp;gt;&amp;gt; type([]) == types.ListType
True
&amp;gt;&amp;gt;&amp;gt; type(int) = types.TypeType
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不同类型都有对应的type，所有类型本身的类型就是一种&lt;code&gt;TypeType&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用isinstance()&lt;/strong&gt;，判断class的类型使用type()并不是很方便，直接使用&lt;code&gt;isinstance()&lt;/code&gt;函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = Ainimal()
&amp;gt;&amp;gt;&amp;gt; d = Dog()
&amp;gt;&amp;gt;&amp;gt; isinstance(d, Dog)
True
&amp;gt;&amp;gt;&amp;gt; isinstance(d, Animal)
True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可见isinstance()对继承关系也是有用的。当然，isinstance()还可以判断变量是某些类型中之一。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(&amp;apos;a&amp;apos;, str)
True
&amp;gt;&amp;gt;&amp;gt; isinstance(&amp;apos;a&amp;apos;, (str, unicode))
True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;使用dir()&lt;/strong&gt;可以获得一个对象的所有属性和方法。返回一个包含字符串的list。&lt;/p&gt;
&lt;p&gt;同时配合&lt;code&gt;getattr()&lt;/code&gt;、&lt;code&gt;setattr()&lt;/code&gt;、&lt;code&gt;hassttr()&lt;/code&gt;可以直接操作一个对象的状态。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; hasattr(obj, &amp;apos;x&amp;apos;)
True
&amp;gt;&amp;gt;&amp;gt; hasattr(obj, &amp;apos;y&amp;apos;)
False
&amp;gt;&amp;gt;&amp;gt; setattr(obj, &amp;apos;y&amp;apos;, 10)
&amp;gt;&amp;gt;&amp;gt; getattr(obj, &amp;apos;y&amp;apos;)
10
&amp;gt;&amp;gt;&amp;gt; obj.y
10
&amp;gt;&amp;gt;&amp;gt; getattr(obj, &amp;apos;z&amp;apos;, 404)
404
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一般正确的用法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def readImage(fp):
    if hasattr(fp, &amp;apos;read&amp;apos;):
        return readData(fp)
    return None
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5-slots&quot;&gt;&lt;a href=&quot;#5-slots&quot; class=&quot;headerlink&quot; title=&quot;5.slots&quot;&gt;&lt;/a&gt;5.&lt;strong&gt;slots&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;基于Python的动态语言特性，创建class实例之后我们还可以在运行过程中给该实例绑定新的属性和方法，但是新绑定的属性和方法对其他实例是不起作用的。为了给所有实例都绑定方法，可以直接给class绑定新的方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def set_score(self, score):
    self.score = score;
Student.set_score = Method_Type(set_score, None, Student)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;使用&lt;strong&gt;slots&lt;/strong&gt;&lt;/strong&gt;可以限制class的属性。Python允许在定义class的时候，定义一个特殊的&lt;code&gt;__slots__&lt;/code&gt;变量，来限制该class能添加的属性。&lt;code&gt;__slots__&lt;/code&gt;仅仅对当前class有效，对继承的子类是不起作用的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Student(object):
    __slots__ = (&amp;apos;name&amp;apos;, &amp;apos;age&amp;apos;) # Use tuple to describe __slots__
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果在子类中定义&lt;code&gt;__slots__&lt;/code&gt;，那么子类允许定义的属性就是自身的&lt;code&gt;__slots__&lt;/code&gt;加上父类的&lt;code&gt;__slots__&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;6-property&quot;&gt;&lt;a href=&quot;#6-property&quot; class=&quot;headerlink&quot; title=&quot;6.@property&quot;&gt;&lt;/a&gt;6.@property&lt;/h3&gt;&lt;p&gt;绑定属性时，为了方便起见，有时候会将属性直接暴露出去，但是这样就没法检查参数，导致属性可以随便改。因此，我们需要限制属性的范围。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Student(object):
    def get_score(self):
        return self._score
    def set_score(self, val):
        if not isinstance(val, int):
            raise ValueError(&amp;apos;score must be an integer&amp;apos;)
        if val &amp;lt; 0 or val &amp;gt; 100:
            raise ValueError(&amp;apos;score must between 0 - 100&amp;apos;)
        self._score = val
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是这样做就没法将属性直接暴露出去方便读写了。因此我们可以用装饰器decorator给函数动态加上功能。Python内置的&lt;code&gt;@property&lt;/code&gt;装饰器就是负责把一个方法变成属性调用。把一个getter方法变成属性只需加上&lt;code&gt;@property&lt;/code&gt;，此时&lt;code&gt;@property&lt;/code&gt;本身又创建了另一个装饰器&lt;code&gt;@property.setter&lt;/code&gt;，负责把setter方法编程属性直接赋值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Student(object):
    @property
    def score(self):
        return self._score
    @property.setter
    def score(self, val):
        if not isinstance(val, int):
            raise ValueError(&amp;apos;score must be an integer&amp;apos;)
        if val &amp;lt; 0 or val &amp;gt; 100:
            raise ValueError(&amp;apos;score must between 0-100&amp;apos;)
        self._score = val
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样可以把score当做public的属性来用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; s = Student()
&amp;gt;&amp;gt;&amp;gt; s.score = 100 # equals s.score(100)
&amp;gt;&amp;gt;&amp;gt; s.score # equals s.score()
100
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当只使用&lt;code&gt;@property&lt;/code&gt;而不使用&lt;code&gt;@property.setter&lt;/code&gt;时相关的变量就是&lt;strong&gt;只读属性&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;7-多重继承&quot;&gt;&lt;a href=&quot;#7-多重继承&quot; class=&quot;headerlink&quot; title=&quot;7.多重继承&quot;&gt;&lt;/a&gt;7.多重继承&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python学习笔记–5-面向对象编程&quot;&gt;&lt;a href=&quot;#Python学习笔记–5-面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记–5.面向对象编程&quot;&gt;&lt;/a&gt;Python学习笔记–5.面向对象编程&lt;/h2&gt;&lt;p&gt;MrZigZag @ Peking University&lt;/p&gt;
&lt;p&gt;2015-07-17&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1.定义&quot;&gt;&lt;/a&gt;1.定义&lt;/h3&gt;&lt;p&gt;通过&lt;code&gt;class&lt;/code&gt;关键字定义类，父类&lt;code&gt;(object)&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class MyClass(object):
    pass
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;没有合适的继承类时可以使用&lt;code&gt;object&lt;/code&gt;类，这是所有的类都会继承的类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自由绑定&lt;/strong&gt;，Python是动态语言，可以在运行过程中实时地给实例&lt;code&gt;instance&lt;/code&gt;绑定新的属性，同时还可以绑定新的方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; ins1 = MyClass()
&amp;gt;&amp;gt;&amp;gt; ins1.name = &amp;apos;Test&amp;apos;

def set_age(self, age):
    self.age = age
from types inport MethodType
s = Student()
s.set_age = MethodType(set_age, s, Student)
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记4</title>
    <link href="http://yoursite.com/2016/04/07/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/"/>
    <id>http://yoursite.com/2016/04/07/python学习笔记4/</id>
    <published>2016-04-07T08:20:05.000Z</published>
    <updated>2016-04-07T14:04:53.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Python学习笔记–4-模块&quot;&gt;&lt;a href=&quot;#Python学习笔记–4-模块&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记–4.模块&quot;&gt;&lt;/a&gt;Python学习笔记–4.模块&lt;/h2&gt;&lt;p&gt;MrZigZag@Peking University&lt;/p&gt;
&lt;p&gt;2015-07-15&lt;/p&gt;
&lt;h3 id=&quot;1-模块&quot;&gt;&lt;a href=&quot;#1-模块&quot; class=&quot;headerlink&quot; title=&quot;1.模块&quot;&gt;&lt;/a&gt;1.模块&lt;/h3&gt;&lt;p&gt;类似于Java中的Package，Python提供模块&lt;code&gt;module&lt;/code&gt;来将相关的代码打包。编写程序的时候可以使用内置模块，也可以使用第三方模块。&lt;/p&gt;
&lt;p&gt;模块可以用于避免函数名冲突等问题，但是模块中尽量不要使用Python内置函数的&lt;a href=&quot;https://docs.python.org/2/library/functions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;函数名&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;避免模块名相同，提供了按照目录来组织模块的方法，称为包&lt;code&gt;package&lt;/code&gt;，每个包都要有一个&lt;code&gt;__init__.py&lt;/code&gt;文件，表示这是一个package，可以空。因为&lt;code&gt;__init__.py&lt;/code&gt;本身就是一个模块，就表示包名。&lt;/p&gt;
&lt;p&gt;包可以嵌套，组成多级多层次的包结构。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;MyPackage
    &amp;gt;Web
        __init__.py
        http.py
    __init__.py
    pytest.py
    http.py
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;2-创建和使用模块&quot;&gt;&lt;a href=&quot;#2-创建和使用模块&quot; class=&quot;headerlink&quot; title=&quot;2.创建和使用模块&quot;&gt;&lt;/a&gt;2.创建和使用模块&lt;/h3&gt;&lt;p&gt;以内置模块&lt;code&gt;sys&lt;/code&gt;为例，创建一个新模块&lt;code&gt;test&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

&amp;apos; a test module &amp;apos;
__author__ = &amp;apos;MrZigZag&amp;apos;

import sys
def my_test():
    if len(sys.argv) == 1: # no other arguments
        print &amp;apos;Hello World!&amp;apos;
    elif len(sys.argv) == 2: # one other argument, treat as a name
        print &amp;apos;Hello %s!&amp;apos; % sys.argv[1]
    else:
        print &amp;apos;Too many arguments!&amp;apos;

if __name__ == &amp;apos;__main__&amp;apos;:
    my_test()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;前两行是标准注释，第四行是一个字符串，任何模块的第一个字符串都会被视为模块的文档注释，之后可以使用&lt;code&gt;__author__&lt;/code&gt;将作者写进去。&lt;/p&gt;
&lt;p&gt;导入模块&lt;code&gt;sys&lt;/code&gt;之后，变量sys就指向该模块。&lt;/p&gt;
&lt;p&gt;最后两两句话常用在测试当中，如果直接命令行执行该模块，解释器就会把&lt;code&gt;__name__&lt;/code&gt;置为&lt;code&gt;__main__&lt;/code&gt;，如果其他地方导入&lt;code&gt;test&lt;/code&gt;模块则不会，这一句就会失效。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; python test.py MrZigZag
Hello MrZigZag!
&amp;gt;&amp;gt;&amp;gt; python test.py
Hello World!
&amp;gt;&amp;gt;&amp;gt; python test.py 1 2
Too many arguments!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;别名&lt;/strong&gt;，可以给导入的模块赋别名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import sys as SysModule
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还可以在运行时根据当前环境选择最合适的模块，比如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try:
    import cStringIO as stringIO
except ImportError: # catching import error
    import stringIO
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以优先调用&lt;code&gt;cStringIO&lt;/code&gt;并且无论调用那个，执行时名称都是&lt;code&gt;stringIO&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;函数的可访问性&lt;/strong&gt;，模块中可以把外部不需要的函数全部定义成private，外部引用的定义为public。&lt;/p&gt;
&lt;p&gt;将一个函数定义为private的，只需在命名上以&lt;code&gt;_&lt;/code&gt;开头，如&lt;code&gt;def _private_function(name):&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;值得注意的是，&lt;code&gt;__xxx__&lt;/code&gt;之类一般都是特殊变量，可以直接被引用，但是有特殊用途，一般命名时避免使用这个格式。&lt;/p&gt;
&lt;h3 id=&quot;3-安装模块&quot;&gt;&lt;a href=&quot;#3-安装模块&quot; class=&quot;headerlink&quot; title=&quot;3.安装模块&quot;&gt;&lt;/a&gt;3.安装模块&lt;/h3&gt;&lt;p&gt;Python中第三方模块一般使用easy_install或者pip来安装，mac自带pip。&lt;/p&gt;
&lt;p&gt;模块会有路径问题，加载模块时，Python会在指定的路径下搜索对应的.py文件。默认情况下，会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径放在sys模块的path变量中。要添加自己的搜索目录可以直接在&lt;code&gt;sys.path&lt;/code&gt;后面增加，但是在&lt;strong&gt;运行结束时失效&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; sys.path
&amp;gt;&amp;gt;&amp;gt; sys.path.append(&amp;apos;my_path&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-使用-future&quot;&gt;&lt;a href=&quot;#4-使用-future&quot; class=&quot;headerlink&quot; title=&quot;4.使用__future__&quot;&gt;&lt;/a&gt;4.使用&lt;code&gt;__future__&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Python3相对于Python2.x修改比较大，很多Python2.x的程序在Python3上无法正确运行，在Python2.x中要使用Python3的一些新特性可以使用&lt;code&gt;__future__&lt;/code&gt;模块。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from __future__ import unicode_literals
from __future__ import division
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python学习笔记–4-模块&quot;&gt;&lt;a href=&quot;#Python学习笔记–4-模块&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记–4.模块&quot;&gt;&lt;/a&gt;Python学习笔记–4.模块&lt;/h2&gt;&lt;p&gt;MrZigZag@Peking University&lt;/p&gt;
&lt;p&gt;2015-07-15&lt;/p&gt;
&lt;h3 id=&quot;1-模块&quot;&gt;&lt;a href=&quot;#1-模块&quot; class=&quot;headerlink&quot; title=&quot;1.模块&quot;&gt;&lt;/a&gt;1.模块&lt;/h3&gt;&lt;p&gt;类似于Java中的Package，Python提供模块&lt;code&gt;module&lt;/code&gt;来将相关的代码打包。编写程序的时候可以使用内置模块，也可以使用第三方模块。&lt;/p&gt;
&lt;p&gt;模块可以用于避免函数名冲突等问题，但是模块中尽量不要使用Python内置函数的&lt;a href=&quot;https://docs.python.org/2/library/functions.html&quot;&gt;函数名&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;避免模块名相同，提供了按照目录来组织模块的方法，称为包&lt;code&gt;package&lt;/code&gt;，每个包都要有一个&lt;code&gt;__init__.py&lt;/code&gt;文件，表示这是一个package，可以空。因为&lt;code&gt;__init__.py&lt;/code&gt;本身就是一个模块，就表示包名。&lt;/p&gt;
&lt;p&gt;包可以嵌套，组成多级多层次的包结构。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;MyPackage
    &amp;gt;Web
        __init__.py
        http.py
    __init__.py
    pytest.py
    http.py
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记3</title>
    <link href="http://yoursite.com/2016/04/07/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
    <id>http://yoursite.com/2016/04/07/python学习笔记3/</id>
    <published>2016-04-07T08:19:05.000Z</published>
    <updated>2016-04-07T14:02:58.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Python学习笔记–3-函数式编程&quot;&gt;&lt;a href=&quot;#Python学习笔记–3-函数式编程&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记–3.函数式编程&quot;&gt;&lt;/a&gt;Python学习笔记–3.函数式编程&lt;/h2&gt;&lt;p&gt;MrZigZag@Peking University&lt;/p&gt;
&lt;p&gt;2015-07-12&lt;/p&gt;
&lt;h3 id=&quot;1-函数式编程&quot;&gt;&lt;a href=&quot;#1-函数式编程&quot; class=&quot;headerlink&quot; title=&quot;1.函数式编程&quot;&gt;&lt;/a&gt;1.函数式编程&lt;/h3&gt;&lt;p&gt;抽象层次比较高，允许把函数本身作为参数传入另一个函数，还允许返回一个函数。&lt;/p&gt;
&lt;p&gt;Python对函数式编程提供部分支持。&lt;/p&gt;
&lt;h3 id=&quot;2-高阶函数&quot;&gt;&lt;a href=&quot;#2-高阶函数&quot; class=&quot;headerlink&quot; title=&quot;2.高阶函数&quot;&gt;&lt;/a&gt;2.高阶函数&lt;/h3&gt;&lt;p&gt;将简单的函数作为参数传入高阶函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def add(x, y, f):
    return f(x) + f(y)

&amp;gt;&amp;gt;&amp;gt; add(-5, 6, abs)
11
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;code&gt;map()&lt;/code&gt;接收两个参数，一个是函数另一个是序列，返回一个经函数处理过的序列。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def f(x):
    return x * x

&amp;gt;&amp;gt;&amp;gt; map(f, range(1,10))
[1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;reduce()&lt;/code&gt;是把一个函数f作用在一个序列list上，函数f接收两个参数，因而是逐个累积运算。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;reduce(f, [1, 2, 3]) = f(f(1, 2), 3)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;利用reduce可以轻松将一个string转换成int，例如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def str2int(s):
    def fn(x, y):
        return x * 10 + y
    def char2num(s):
        return {&amp;apos;0&amp;apos;: 0, &amp;apos;1&amp;apos;: 1, &amp;apos;2&amp;apos;: 2, &amp;apos;3&amp;apos;: 3, &amp;apos;4&amp;apos;: 4, &amp;apos;5&amp;apos;: 5, &amp;apos;6&amp;apos;: 6, &amp;apos;7&amp;apos;: 7, &amp;apos;8&amp;apos;: 8, &amp;apos;9&amp;apos;: 9}[s]
    return reduce(fn, map(char2num, s))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt;过滤函数，给定一个序列和一个函数，函数依次作用于序列并根据结果的True/False决定是否丢弃。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def is_odd(n):
    return n % 2 == 1

&amp;gt;&amp;gt;&amp;gt; filter(is_odd, range(0, 10))
[1, 3, 5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如删除1-100之间的素数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def isn_prime(num):
    if num == 1:
        return True
    for i in range(2, int(math.sqrt(num)) + 1):
        if (num % i == 0):
            return True
    return False

filter(isn_prime, range(1, 101))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;sorted()&lt;/code&gt;对一个list排序，默认对数字是升序排序，字符串则是首字母ASCII码。sorted()是一个高阶函数，可以输入一个比较函数实现自定义排序。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; sorted([13, 2, 90, 33, 14, 5, 1])
[1, 2, 5, 13, 14, 33, 90]

def reversed_cmp(x, y):
    if x &amp;gt; y:
        return -1
    elif x == y:
        return 0
    else:
        return 1
&amp;gt;&amp;gt;&amp;gt; sorted([13, 2, 90, 33, 14, 5, 1], reversed_cmp)
[90, 33, 14, 13,5, 2, 1]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-返回函数和闭包&quot;&gt;&lt;a href=&quot;#3-返回函数和闭包&quot; class=&quot;headerlink&quot; title=&quot;3.返回函数和闭包&quot;&gt;&lt;/a&gt;3.返回函数和闭包&lt;/h3&gt;&lt;p&gt;高阶函数除了接收函数作为参数，还可以把函数作为结果值返回。返回的函数包含了相关的参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def delay_sum(*args):
    def sum():
        ans = 0
        for n in args:
            ans = ans + n
        return ans
    return sum

&amp;gt;&amp;gt;&amp;gt; f = delay_sum(1, 2, 3, 4)
&amp;gt;&amp;gt;&amp;gt; f()
10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;闭包&lt;/strong&gt;内部函数可以引用外部函数的参数和局部变量，外部函数返回内部函数时，相关的参数和变量都保存在返回的函数中。每次调用外部函数都会返回一个新的函数，即使传入相同的参数。因此不同的返回函数相互之间没有影响。&lt;/p&gt;
&lt;p&gt;返回函数不要引用任何后续会发生变化的变量，尤其是循环变量。返回函数只有在显式调用时才会使用变量执行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def counter():
    fs = []
    for i in range(1, 4):
        def f():
            return i * i
        fs.append(f)
    return fs

&amp;gt;&amp;gt;&amp;gt; f1, f2, f3 = counter()
&amp;gt;&amp;gt;&amp;gt; f1()
9
&amp;gt;&amp;gt;&amp;gt; f2()
9
&amp;gt;&amp;gt;&amp;gt; f3()
9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一定要引用循环变量时可以新建一个函数，绑定循环变量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def counter():
    fs = []
    for i in range(1, 4):
        def f(j):
            def g():
                return j * j
            return g
        fs.append(f(j))
    return fs

&amp;gt;&amp;gt;&amp;gt; f1, f2, f3 = counter()
&amp;gt;&amp;gt;&amp;gt; f1()
1
&amp;gt;&amp;gt;&amp;gt; f2()
4
&amp;gt;&amp;gt;&amp;gt; f3()
9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者用匿名函数lambda来实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; f1, f2, f3 = [(lambda i = i:i * i) for i in range(1, 4)]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-匿名函数lambda&quot;&gt;&lt;a href=&quot;#4-匿名函数lambda&quot; class=&quot;headerlink&quot; title=&quot;4.匿名函数lambda&quot;&gt;&lt;/a&gt;4.匿名函数lambda&lt;/h3&gt;&lt;p&gt;简单的形式可以直接使用匿名函数&lt;code&gt;lambda *args:option&lt;/code&gt;，匿名函数只能有一个表达式，但是没有名字，因此不用担心函数名冲突。&lt;/p&gt;
&lt;p&gt;匿名函数可以赋值给一个变量，也可以作为返回值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def test_lambda(x, y):
    return lambda: x * x + y * y
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;匿名函数作为参数传入到高级函数中，具有简单直观的效果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; map(lambda x:x * x, range(1, 10))
[1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5-装饰器Decorator&quot;&gt;&lt;a href=&quot;#5-装饰器Decorator&quot; class=&quot;headerlink&quot; title=&quot;5.装饰器Decorator&quot;&gt;&lt;/a&gt;5.装饰器Decorator&lt;/h3&gt;&lt;p&gt;对于函数对象，在代码运行期间动态增加功能而没有修改原函数的方式称为装饰器。本质上装饰器就是一个返回函数的高阶函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def log(func):
    def wrapper(*args, **kw):
        print &amp;apos;call %s():&amp;apos; % func.__name__
        return func(*args, **kw)
    return wrapper
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;定义好了Decorator之后，可用&lt;code&gt;@&lt;/code&gt;将它置于函数的定义处，这样执行该函数时就会执行装饰器。即相当于执行了&lt;code&gt;func = log(func)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@log
def test():
    print &amp;apos;Hello world!&amp;apos;

&amp;gt;&amp;gt;&amp;gt; test()
call test():
Hello world!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果decorator本身需要传入参数，那就得写一个返回decorator的高阶函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def log(text):
    def decorator(func):
        def wrapper(*args, **kw):
            print &amp;apos;%s %s():&amp;apos; % (text, func.__name__)
            return func(*args, **kw)
        return wrapper
    return decorator
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;6-偏函数&quot;&gt;&lt;a href=&quot;#6-偏函数&quot; class=&quot;headerlink&quot; title=&quot;6.偏函数&quot;&gt;&lt;/a&gt;6.偏函数&lt;/h3&gt;&lt;p&gt;可以把一个函数的某些参数固定住，然后返回一个新的函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import functools
int2 = functool.partial(int, base = 2)

&amp;gt;&amp;gt;&amp;gt; int2(&amp;apos;1001&amp;apos;)
9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实际上就相当于&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kw = {&amp;apos;base&amp;apos; : 2}
int(&amp;apos;1001&amp;apos;, kw)
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python学习笔记–3-函数式编程&quot;&gt;&lt;a href=&quot;#Python学习笔记–3-函数式编程&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记–3.函数式编程&quot;&gt;&lt;/a&gt;Python学习笔记–3.函数式编程&lt;/h2&gt;&lt;p&gt;MrZigZag@Peking University&lt;/p&gt;
&lt;p&gt;2015-07-12&lt;/p&gt;
&lt;h3 id=&quot;1-函数式编程&quot;&gt;&lt;a href=&quot;#1-函数式编程&quot; class=&quot;headerlink&quot; title=&quot;1.函数式编程&quot;&gt;&lt;/a&gt;1.函数式编程&lt;/h3&gt;&lt;p&gt;抽象层次比较高，允许把函数本身作为参数传入另一个函数，还允许返回一个函数。&lt;/p&gt;
&lt;p&gt;Python对函数式编程提供部分支持。&lt;/p&gt;
&lt;h3 id=&quot;2-高阶函数&quot;&gt;&lt;a href=&quot;#2-高阶函数&quot; class=&quot;headerlink&quot; title=&quot;2.高阶函数&quot;&gt;&lt;/a&gt;2.高阶函数&lt;/h3&gt;&lt;p&gt;将简单的函数作为参数传入高阶函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def add(x, y, f):
    return f(x) + f(y)

&amp;gt;&amp;gt;&amp;gt; add(-5, 6, abs)
11
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记2</title>
    <link href="http://yoursite.com/2016/04/07/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <id>http://yoursite.com/2016/04/07/python学习笔记2/</id>
    <published>2016-04-07T08:17:05.000Z</published>
    <updated>2016-04-07T14:01:15.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Python学习笔记–2-函数和高级特性&quot;&gt;&lt;a href=&quot;#Python学习笔记–2-函数和高级特性&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记–2.函数和高级特性&quot;&gt;&lt;/a&gt;Python学习笔记–2.函数和高级特性&lt;/h2&gt;&lt;p&gt;MrZigZag@Peking University&lt;/p&gt;
&lt;p&gt;2015-07-12&lt;/p&gt;
&lt;h3 id=&quot;1-函数&quot;&gt;&lt;a href=&quot;#1-函数&quot; class=&quot;headerlink&quot; title=&quot;1.函数&quot;&gt;&lt;/a&gt;1.函数&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;数据类型转换函数&lt;/strong&gt;，&lt;code&gt;int()&lt;/code&gt;, &lt;code&gt;float()&lt;/code&gt;, &lt;code&gt;str()&lt;/code&gt;, &lt;code&gt;unicode()&lt;/code&gt;, &lt;code&gt;bool()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;函数名实际上就是函数对象的引用，因此可以给函数复制给一个变量然后通过这个变量调用。相当于给函数起了个别名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = abs
&amp;gt;&amp;gt;&amp;gt; a(-1)
1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;自定义函数&lt;code&gt;def&lt;/code&gt;&lt;/strong&gt;，作为占位符可以用&lt;code&gt;pass&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;my_abs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;my_abs2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;参数检查&lt;/strong&gt;可以用内置函数&lt;code&gt;isinstance&lt;/code&gt;实现。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;my_abs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; isinstance(x, (int, float)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; TypeError(&lt;span class=&quot;string&quot;&gt;&#39;bad operand type&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;返回多个值&lt;/strong&gt;，直接在return后面加入多个值即可，实际上返回的是一个Tuple。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x, y)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * x, y / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;默认参数&lt;/strong&gt;可以简化函数调用。必选参数在前，默认参数在后，并且变化大的默认参数尽量靠前。不按顺序提供默认参数时需要把参数名写上。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def enroll(name, gender, age = 6, city = &amp;apos;Beijing&amp;apos;):
    #do something
    pass

&amp;gt;&amp;gt;&amp;gt; enroll(&amp;apos;Bob&amp;apos;, &amp;apos;M&amp;apos;)
&amp;gt;&amp;gt;&amp;gt; enroll(&amp;apos;Bob&amp;apos;, &amp;apos;M&amp;apos;, city = &amp;apos;Tianjin&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;值得注意的是，默认参数有时候会让人掉坑里，例如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def add_end(L = []):
    L.append(&amp;apos;END&amp;apos;)
    return L

&amp;gt;&amp;gt;&amp;gt; add_end()
[&amp;apos;END&amp;apos;]
&amp;gt;&amp;gt;&amp;gt; add_end()
[&amp;apos;END&amp;apos;, &amp;apos;END&amp;apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Python函数定义的时候默认参数L就被计算出来了，默认参数L是一个变量，指向&lt;code&gt;[]&lt;/code&gt;，因此每一调用就改变了&lt;code&gt;[]&lt;/code&gt;，下次调用还是指向这个位置，但是内容已经发生改变。因此，&lt;strong&gt;默认参数必须指向不变对象&lt;/strong&gt;。以上例子可以用&lt;code&gt;None&lt;/code&gt;这个不变对象来实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def add_end(L = None):
    if L is None:
        L = []
    L.append(&amp;apos;END&amp;apos;)
    return L
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;可变参数&lt;/strong&gt;用&lt;code&gt;*&lt;/code&gt;标记，可以将参数组成一个tuple然后传进去，如果参数本身是一个tuple或者list，只需在变量名前加一个&lt;code&gt;*&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def calc(*numbers):
    sum = 0
    for x in numbers
        sum = sum + x * x
    return sum

&amp;gt;&amp;gt;&amp;gt; calc(1, 2, 3)
14
&amp;gt;&amp;gt;&amp;gt; nums = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; calc(*nums)
14
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;关键字参数&lt;/strong&gt;，Python允许传入0个或者多个带参数名的参数，这些参数在函数内部会被自动组装成一个dict。关键字参数的标记符是&lt;code&gt;**&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def person(name, age, **kw):
    print &amp;apos;name:&amp;apos;, name, &amp;apos;age:&amp;apos;, age, &amp;apos;other:&amp;apos;, kw

&amp;gt;&amp;gt;&amp;gt; person(&amp;apos;Bob&amp;apos;, 30)
name: Bob age: 30 other: {}
&amp;gt;&amp;gt;&amp;gt; person(&amp;apos;Alice&amp;apos;, 25, city = &amp;apos;Beijing&amp;apos;, gender = &amp;apos;F&amp;apos;)
name: Alice age: 30 other: {&amp;apos;city&amp;apos;:&amp;apos;Beijing&amp;apos;, &amp;apos;gender&amp;apos;:&amp;apos;F&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关键字参数可以扩展函数的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数组合&lt;/strong&gt;：参数定义的顺序：必选参数，默认参数，可变参数和关键字参数。对于任意函数，无论它的参数是如何定义的，均可以通过类似&lt;code&gt;func(*args, **kw)&lt;/code&gt;的形式调用它。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def func(a, b, c = 0, *args, **kw):
    print &amp;apos;a =&amp;apos;, a, &amp;apos;b =&amp;apos;, b, &amp;apos;c =&amp;apos;, c, &amp;apos;args =&amp;apos;, args, &amp;apos;kw =&amp;apos;, kw

&amp;gt;&amp;gt;&amp;gt; func(1, 2)
a = 1 b = 2 c = 0 args = () kw = {}
&amp;gt;&amp;gt;&amp;gt; func(1, 2, 3, &amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;, x=99)
a = 1 b = 2 c = 3 args = (&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;) kw = {&amp;apos;x&amp;apos;: 99}
&amp;gt;&amp;gt;&amp;gt; args = (1, 2, 3, 4)
&amp;gt;&amp;gt;&amp;gt; kw = {&amp;apos;x&amp;apos;: 99}
&amp;gt;&amp;gt;&amp;gt; func(*args, **kw)
a = 1 b = 2 c = 3 args = (4,) kw = {&amp;apos;x&amp;apos;: 99}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-切片Slice&quot;&gt;&lt;a href=&quot;#2-切片Slice&quot; class=&quot;headerlink&quot; title=&quot;2.切片Slice&quot;&gt;&lt;/a&gt;2.切片Slice&lt;/h3&gt;&lt;p&gt;切片可以将按照不同的间隔将一个list或者tuple切成多段，是批量操作元素的手段。类似于Matlab中的用法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;L[0:3]&lt;/code&gt;表示从0开始到3为止，但是不包含3，因此有&lt;code&gt;3-0=3&lt;/code&gt;个元素。第一个元素是0时可以忽略。&lt;code&gt;L[:3]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;倒数元素也支持切片，如&lt;code&gt;L[-3:-1]&lt;/code&gt;，或者&lt;code&gt;L[-3:]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;默认间隔是1，也可以修改成其他间隔。&lt;code&gt;L[:10:2]&lt;/code&gt;甚至&lt;code&gt;L[::2]&lt;/code&gt;。什么都不写时表示直接复制，如&lt;code&gt;L[:]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对Tuple做切片之后得到的仍然是tuple。&lt;/p&gt;
&lt;p&gt;有了切片，很多循环都可以直接用切片来完成。&lt;/p&gt;
&lt;h3 id=&quot;3-迭代&quot;&gt;&lt;a href=&quot;#3-迭代&quot; class=&quot;headerlink&quot; title=&quot;3.迭代&quot;&gt;&lt;/a&gt;3.迭代&lt;/h3&gt;&lt;p&gt;任何可迭代对象都可以用&lt;code&gt;for&lt;/code&gt;循环，包括我们自定义的类型。&lt;/p&gt;
&lt;p&gt;对dict的迭代，直接用&lt;code&gt;for key in d&lt;/code&gt;迭代key，如果要迭代value，用&lt;code&gt;for value in d.itervalues()&lt;/code&gt;，一起则用&lt;code&gt;for key, value in d.iteritems()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;对字符串也可以迭代。&lt;code&gt;for ch in &amp;#39;ABC&amp;#39;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;判断是否可迭代&lt;/strong&gt;，用collections模块的Iterable类型来判断。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from collections import Iterable
isinstance(&amp;apos;abc&amp;apos;, Iterable)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;enumerate(li)&lt;/code&gt;&lt;/strong&gt;可将一个list转换成一个索引-元素对。这样就可以用下标进行索引。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i, value in enumerate([&amp;apos;A&amp;apos;, &amp;apos;B&amp;apos;, &amp;apos;C&amp;apos;]):
    print i, value
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-列表生成式&quot;&gt;&lt;a href=&quot;#4-列表生成式&quot; class=&quot;headerlink&quot; title=&quot;4.列表生成式&quot;&gt;&lt;/a&gt;4.列表生成式&lt;/h3&gt;&lt;p&gt;可以快速生成一个list，或者由一个list导出另一个list，代码简洁易懂。&lt;/p&gt;
&lt;p&gt;最简单的列表生成方法是&lt;code&gt;range(a, b)&lt;/code&gt;方法。但是复杂的生成式要用for循环。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; [x * x for x in range(1, 11)]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;for之后还可以加入if进行条件判断。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; [x * x for x in range(1, 11) if x % 2]
[1, 9, 25, 49, 81]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还可以直接多层循环。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; [x + y for x in &amp;apos;ABC&amp;apos; for y in &amp;apos;XYZ&amp;apos;]
[&amp;apos;AX&amp;apos;, &amp;apos;AY&amp;apos;, &amp;apos;AZ&amp;apos;, &amp;apos;BX&amp;apos;, &amp;apos;BY&amp;apos;, &amp;apos;BZ&amp;apos;, &amp;apos;CX&amp;apos;, &amp;apos;CY&amp;apos;, &amp;apos;CZ&amp;apos;]
&amp;gt;&amp;gt;&amp;gt; L = [&amp;apos;Hello&amp;apos;, &amp;apos;World&amp;apos;, &amp;apos;IBM&amp;apos;]
&amp;gt;&amp;gt;&amp;gt; [ch for word in L for ch in word]
[&amp;apos;H&amp;apos;, &amp;apos;e&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;o&amp;apos;, &amp;apos;W&amp;apos;, &amp;apos;o&amp;apos;, &amp;apos;r&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;I&amp;apos;, &amp;apos;B&amp;apos;, &amp;apos;M&amp;apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5-生成器Generator&quot;&gt;&lt;a href=&quot;#5-生成器Generator&quot; class=&quot;headerlink&quot; title=&quot;5.生成器Generator&quot;&gt;&lt;/a&gt;5.生成器Generator&lt;/h3&gt;&lt;p&gt;类似于列表生成式，但是一边运算一边生成元素。不必一下子生成一整个list，可以节约大量的空间。&lt;/p&gt;
&lt;p&gt;生成器的构造方法类似于列表生成器，只需将&lt;code&gt;[]&lt;/code&gt;改成&lt;code&gt;()&lt;/code&gt;。调用下一个元素可以用&lt;code&gt;g.next()&lt;/code&gt;，但是因为生成器是可迭代的，一般都直接用for。&lt;/p&gt;
&lt;p&gt;如果推算算法比较复杂还可以直接用函数来实现，具体的细节是在返回的地方加入&lt;code&gt;field&lt;/code&gt;，运行到此处会返回一个数作为输出，下次调用&lt;code&gt;.next()&lt;/code&gt;时直接回到&lt;code&gt;field&lt;/code&gt;处继续执行。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n, a, b = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; n &amp;lt; num:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		a, b = b, a + b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		n = n + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python学习笔记–2-函数和高级特性&quot;&gt;&lt;a href=&quot;#Python学习笔记–2-函数和高级特性&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记–2.函数和高级特性&quot;&gt;&lt;/a&gt;Python学习笔记–2.函数和高级特性&lt;/h2&gt;&lt;p&gt;MrZigZag@Peking University&lt;/p&gt;
&lt;p&gt;2015-07-12&lt;/p&gt;
&lt;h3 id=&quot;1-函数&quot;&gt;&lt;a href=&quot;#1-函数&quot; class=&quot;headerlink&quot; title=&quot;1.函数&quot;&gt;&lt;/a&gt;1.函数&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;数据类型转换函数&lt;/strong&gt;，&lt;code&gt;int()&lt;/code&gt;, &lt;code&gt;float()&lt;/code&gt;, &lt;code&gt;str()&lt;/code&gt;, &lt;code&gt;unicode()&lt;/code&gt;, &lt;code&gt;bool()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;函数名实际上就是函数对象的引用，因此可以给函数复制给一个变量然后通过这个变量调用。相当于给函数起了个别名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = abs
&amp;gt;&amp;gt;&amp;gt; a(-1)
1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;自定义函数&lt;code&gt;def&lt;/code&gt;&lt;/strong&gt;，作为占位符可以用&lt;code&gt;pass&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;my_abs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;my_abs2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记1</title>
    <link href="http://yoursite.com/2016/04/07/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2016/04/07/Python学习笔记1/</id>
    <published>2016-04-07T08:16:05.000Z</published>
    <updated>2016-04-07T13:58:31.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Python学习笔记–0-Python基础&quot;&gt;&lt;a href=&quot;#Python学习笔记–0-Python基础&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记–0.Python基础&quot;&gt;&lt;/a&gt;Python学习笔记–0.Python基础&lt;/h1&gt;&lt;h2 id=&quot;0-Unix下直接运行-py文件&quot;&gt;&lt;a href=&quot;#0-Unix下直接运行-py文件&quot; class=&quot;headerlink&quot; title=&quot;0.Unix下直接运行.py文件&quot;&gt;&lt;/a&gt;0.Unix下直接运行.py文件&lt;/h2&gt;&lt;p&gt;在文件开头加入&lt;code&gt;#!/usr/bin/env python&lt;/code&gt;,然后在命令行中修改权限，赋予其可执行的权限。&lt;code&gt;$ chmod a+x hello.py&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-输入输出&quot;&gt;&lt;a href=&quot;#1-输入输出&quot; class=&quot;headerlink&quot; title=&quot;1.输入输出&quot;&gt;&lt;/a&gt;1.输入输出&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;命令行输入直接用&lt;code&gt;raw_input()&lt;/code&gt;,括号里可以放提示语。 得到的是一个字符串，要转换成其他数据类型要用强制类型转换。如&lt;code&gt;int(raw_input())&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;p&gt;命令行输入可以用&lt;code&gt;print&lt;/code&gt;，后面可以带各种格式的数据，连接用&lt;code&gt;,&lt;/code&gt;，但是需要注意，每次遇到&lt;code&gt;,&lt;/code&gt;均会输出一个空格。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;name = raw_input(&amp;apos;please input your name:&amp;apos;)
&amp;gt;&amp;gt;&amp;gt;print &amp;apos;User name:&amp;apos;, name
User name: MrZigZag
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-语法基础&quot;&gt;&lt;a href=&quot;#2-语法基础&quot; class=&quot;headerlink&quot; title=&quot;2.语法基础&quot;&gt;&lt;/a&gt;2.语法基础&lt;/h2&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Python以缩进来进行控制，因此尽量用&lt;strong&gt;4个空格&lt;/strong&gt;来做缩进。缩进会使代码的复制粘贴失效，因此应该尽量写出缩进较少的代码。&lt;/li&gt;
&lt;li&gt;大小写敏感&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;为注释标记&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-数据类型&quot;&gt;&lt;a href=&quot;#3-数据类型&quot; class=&quot;headerlink&quot; title=&quot;3.数据类型&quot;&gt;&lt;/a&gt;3.数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;整数&lt;/strong&gt;可用16进制，&lt;code&gt;0xffff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浮点数&lt;/strong&gt;直接写即可，但是也可以用科学记数法，如&lt;code&gt;1.23e-5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字符串&lt;/strong&gt;的表示可以用双引号，也可以用单引号，两者等价。&lt;code&gt;&amp;#39;Hello World!&amp;#39;&lt;/code&gt;=&lt;code&gt;&amp;quot;Hello World!&amp;quot;&lt;/code&gt;，如果&lt;code&gt;&amp;#39;&lt;/code&gt;本身也是一个字符，则用&lt;code&gt;&amp;quot;&lt;/code&gt;包围起来，如&lt;code&gt;&amp;quot;I&amp;#39;m OK&amp;quot;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转义符&lt;/strong&gt;用&lt;code&gt;\&lt;/code&gt;来转义，需要&lt;code&gt;\&lt;/code&gt;时直接用&lt;code&gt;\\&lt;/code&gt;表示。同时提供字符串不转义的方法，&lt;code&gt;r&amp;#39;\n&amp;#39;&lt;/code&gt;直接就是&lt;code&gt;\n&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多行字符串&lt;/strong&gt;用&lt;code&gt;&amp;#39;&amp;#39;&amp;#39;...&amp;#39;&amp;#39;&amp;#39;&lt;/code&gt;表示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特殊值&lt;/strong&gt; 布尔值&lt;code&gt;True&lt;/code&gt;和&lt;code&gt;False&lt;/code&gt;，空值&lt;code&gt;None&lt;/code&gt;，&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常量&lt;/strong&gt;，在Python中，通常用全部大写的变量名表示常量。&lt;code&gt;PI = 3.14159265359&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-编码&quot;&gt;&lt;a href=&quot;#4-编码&quot; class=&quot;headerlink&quot; title=&quot;4.编码&quot;&gt;&lt;/a&gt;4.编码&lt;/h2&gt;&lt;h3 id=&quot;编码方式&quot;&gt;&lt;a href=&quot;#编码方式&quot; class=&quot;headerlink&quot; title=&quot;编码方式&quot;&gt;&lt;/a&gt;编码方式&lt;/h3&gt;&lt;p&gt;Python使用UTF-8编码，一般英语字符串使用ASCII码表示。提供&lt;code&gt;ord()&lt;/code&gt;和&lt;code&gt;chr()&lt;/code&gt;来转换数字和字母。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; ord(&amp;apos;A&amp;apos;)
65
&amp;gt;&amp;gt;&amp;gt; chr(65)
&amp;apos;A&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要使用中文时，需添加标记以强制使用Unicode，Unicode字符&lt;code&gt;u&amp;#39;...&amp;#39;&lt;/code&gt;，比如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print u&amp;apos;中文&amp;apos;
中文
&amp;gt;&amp;gt;&amp;gt; u&amp;apos;中&amp;apos;
u&amp;apos;\4e2d&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;转换可以用点取&lt;code&gt;.encode(&amp;#39;utf-8&amp;#39;)&lt;/code&gt;，同时可用&lt;code&gt;decode(&amp;#39;utf-8&amp;#39;)&lt;/code&gt;反向转换。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print &amp;apos;\xe4\xb8\xad\xe6\x96\x87&amp;apos;.decode(&amp;apos;utf-8&amp;apos;)
中文
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可用&lt;code&gt;len()&lt;/code&gt;方法获取在Unicode中字符串的长度。&lt;/p&gt;
&lt;h3 id=&quot;字符串格式化&quot;&gt;&lt;a href=&quot;#字符串格式化&quot; class=&quot;headerlink&quot; title=&quot;字符串格式化&quot;&gt;&lt;/a&gt;字符串格式化&lt;/h3&gt;&lt;p&gt;Python字符串的格式化方式与C相同，都是用&lt;code&gt;%&lt;/code&gt;来实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print &amp;apos;This is %s university, the No.%d university in %s.&amp;apos; % (&amp;apos;Peking&amp;apos;, 1, &amp;apos;China&amp;apos;)
This is Peking university, the No.1 university in China.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;整数&lt;/strong&gt;&lt;code&gt;%d&lt;/code&gt;， &lt;strong&gt;浮点数&lt;/strong&gt;&lt;code&gt;%f&lt;/code&gt;,加数字还可以补0和小数位数。&lt;code&gt;%2d&lt;/code&gt;, &lt;code&gt;%02d&lt;/code&gt;, &lt;code&gt;%02f&lt;/code&gt;,不确定用什么时，&lt;code&gt;%s&lt;/code&gt;永远有效。&lt;/p&gt;
&lt;h2 id=&quot;5-List&quot;&gt;&lt;a href=&quot;#5-List&quot; class=&quot;headerlink&quot; title=&quot;5.List&quot;&gt;&lt;/a&gt;5.List&lt;/h2&gt;&lt;p&gt;List是Python内置的列表，有序的集合,类似于C++和Java的vector，可以随时添加和删除元素。定义时用&lt;code&gt;[...]&lt;/code&gt;。访问可用正数索引，或者负数索引（从后往前取）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; nums = [1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; nums[1]
2
&amp;gt;&amp;gt;&amp;gt; nums[-1]
4
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;添加到末尾用&lt;code&gt;append()&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;插入到指定位置则用&lt;code&gt;insert(i, info)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除末尾用&lt;code&gt;pop()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除指定元素&lt;code&gt;pop(i)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改指定元素时直接改即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; nums.append(5)
&amp;gt;&amp;gt;&amp;gt; nums.insert(0, -1)
&amp;gt;&amp;gt;&amp;gt; nums.pop();
&amp;gt;&amp;gt;&amp;gt; nums.pop(4);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;list里边的元素类型可以不同，例如&lt;code&gt;mylist = [&amp;#39;apple&amp;#39;, 12, True]&lt;/code&gt;&lt;br&gt;list里边还可以嵌入一个list，要读取list内嵌的list直接用多维数组的方式。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; p = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; q = [0, p, 4, 5]
&amp;gt;&amp;gt;&amp;gt; len(q)
4
&amp;gt;&amp;gt;&amp;gt; q[1][1]
2
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;6-Tuple&quot;&gt;&lt;a href=&quot;#6-Tuple&quot; class=&quot;headerlink&quot; title=&quot;6.Tuple&quot;&gt;&lt;/a&gt;6.Tuple&lt;/h2&gt;&lt;p&gt;Tuple与list非常类似，但是一旦被初始化就不能修改，有点像一组固定的指针。访问类似于list，但不能赋值。&lt;br&gt;空Tuple直接写成&lt;code&gt;()&lt;/code&gt;，只有元素的tuple需要在定义时加一个&lt;code&gt;,&lt;/code&gt;以免表示为小括号。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; t = ()
&amp;gt;&amp;gt;&amp;gt; t = (1, )
&amp;gt;&amp;gt;&amp;gt; t
(1,)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Tuple不能被修改是指Tuple本身的元素指向固定，不能被修改。但是如果元素是list等可变类型，则可以对list进行修改。因此，tuple是固定了顶层的元素，而内部的元素可根据运行时需要修改。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; t = (&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;, [&amp;apos;A&amp;apos;, &amp;apos;B&amp;apos;])
&amp;gt;&amp;gt;&amp;gt; t[2][0] = &amp;apos;X&amp;apos;
&amp;gt;&amp;gt;&amp;gt; t[2][1] = &amp;apos;Y&amp;apos;
&amp;gt;&amp;gt;&amp;gt; t
(&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;, [&amp;apos;X&amp;apos;, &amp;apos;Y&amp;apos;])
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;7-跳转&quot;&gt;&lt;a href=&quot;#7-跳转&quot; class=&quot;headerlink&quot; title=&quot;7.跳转&quot;&gt;&lt;/a&gt;7.跳转&lt;/h2&gt;&lt;p&gt;&lt;code&gt;if&lt;/code&gt;没有括号，直接跟在后面，但是条件结束要加一个&lt;code&gt;:&lt;/code&gt;，else if用的是&lt;code&gt;elif&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if age &amp;gt;= 18:
    print &amp;apos;adult&amp;apos;
elif age &amp;gt;= 6:
    print &amp;apos;teenager&amp;apos;
else:
    print &amp;apos;kid&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;for&lt;/code&gt;循环，类似于iterator，迭代获取list或者tuple中的元素，&lt;code&gt;for x in ...&lt;/code&gt;。如果要获取一段整数序列，可以用&lt;code&gt;range(a, b)&lt;/code&gt;获得从a开始到b-1的整数序列。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for x in range(2, 10):
    sum = sum + x
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另一种循环是&lt;code&gt;while&lt;/code&gt;循环，记得类似于if，要加冒号。&lt;/p&gt;
&lt;h2 id=&quot;8-Dict&quot;&gt;&lt;a href=&quot;#8-Dict&quot; class=&quot;headerlink&quot; title=&quot;8.Dict&quot;&gt;&lt;/a&gt;8.Dict&lt;/h2&gt;&lt;p&gt;Dict类似于Map，提供&lt;code&gt;key-value&lt;/code&gt;的存储方式，直接用key即可获得value。&lt;strong&gt;key要求不可变&lt;/strong&gt;，只能用字符串、整数等，不能用list。而value可以是任何数据类型。初始化用&lt;code&gt;{key:value}&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;访问某一个pair，可以直接用key，类似于list的访问，&lt;code&gt;score[&amp;#39;MrZigZag&amp;#39;]&lt;/code&gt;。要避免key不存在的错误，先用&lt;code&gt;in&lt;/code&gt;方法判断是否有这个key，或者直接用&lt;code&gt;get(key, value)&lt;/code&gt;方法，找不到直接反悔&lt;code&gt;value&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &amp;apos;Thomas&amp;apos; in score
False
&amp;gt;&amp;gt;&amp;gt; score.get(&amp;apos;Thomas&amp;apos;, -1)
-1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除对象用&lt;code&gt;pop(key)&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;9-Set&quot;&gt;&lt;a href=&quot;#9-Set&quot; class=&quot;headerlink&quot; title=&quot;9.Set&quot;&gt;&lt;/a&gt;9.Set&lt;/h2&gt;&lt;p&gt;Set类似于Dict，也是一组key的组合，但是只存储key不存储value。在Set中没用重复的key。&lt;/p&gt;
&lt;p&gt;Set的创建需要一个list作为输入。用&lt;code&gt;add(key)&lt;/code&gt;添加key，但是重复添加的key只有一个。&lt;code&gt;remove(key)&lt;/code&gt;删除元素。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; s = set([1, 2, 3])
&amp;gt;&amp;gt;&amp;gt; s.add(3)
&amp;gt;&amp;gt;&amp;gt; s
set([1, 2, 3])
&amp;gt;&amp;gt;&amp;gt; s.remove(3)
&amp;gt;&amp;gt;&amp;gt; s
set([1, 2])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Set是一个集合，可以用来进行交集&lt;code&gt;s1 &amp;amp; s2&lt;/code&gt;和并集&lt;code&gt;s1 | s2&lt;/code&gt;操作。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python学习笔记–0-Python基础&quot;&gt;&lt;a href=&quot;#Python学习笔记–0-Python基础&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记–0.Python基础&quot;&gt;&lt;/a&gt;Python学习笔记–0.Python基础&lt;/h1&gt;&lt;h2 id=&quot;0-Unix下直接运行-py文件&quot;&gt;&lt;a href=&quot;#0-Unix下直接运行-py文件&quot; class=&quot;headerlink&quot; title=&quot;0.Unix下直接运行.py文件&quot;&gt;&lt;/a&gt;0.Unix下直接运行.py文件&lt;/h2&gt;&lt;p&gt;在文件开头加入&lt;code&gt;#!/usr/bin/env python&lt;/code&gt;,然后在命令行中修改权限，赋予其可执行的权限。&lt;code&gt;$ chmod a+x hello.py&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-输入输出&quot;&gt;&lt;a href=&quot;#1-输入输出&quot; class=&quot;headerlink&quot; title=&quot;1.输入输出&quot;&gt;&lt;/a&gt;1.输入输出&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;命令行输入直接用&lt;code&gt;raw_input()&lt;/code&gt;,括号里可以放提示语。 得到的是一个字符串，要转换成其他数据类型要用强制类型转换。如&lt;code&gt;int(raw_input())&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;p&gt;命令行输入可以用&lt;code&gt;print&lt;/code&gt;，后面可以带各种格式的数据，连接用&lt;code&gt;,&lt;/code&gt;，但是需要注意，每次遇到&lt;code&gt;,&lt;/code&gt;均会输出一个空格。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;name = raw_input(&amp;apos;please input your name:&amp;apos;)
&amp;gt;&amp;gt;&amp;gt;print &amp;apos;User name:&amp;apos;, name
User name: MrZigZag
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-语法基础&quot;&gt;&lt;a href=&quot;#2-语法基础&quot; class=&quot;headerlink&quot; title=&quot;2.语法基础&quot;&gt;&lt;/a&gt;2.语法基础&lt;/h2&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>背包问题</title>
    <link href="http://yoursite.com/2016/04/02/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/04/02/背包问题/</id>
    <published>2016-04-01T16:04:06.000Z</published>
    <updated>2016-04-07T09:45:17.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;01背包问题&quot;&gt;&lt;a href=&quot;#01背包问题&quot; class=&quot;headerlink&quot; title=&quot;01背包问题&quot;&gt;&lt;/a&gt;01背包问题&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;有N件物体，体积为&lt;em&gt;v1、v2…vN&lt;/em&gt;，价值为&lt;em&gt;w1、w2…wN&lt;/em&gt;。&lt;br&gt;现在有一个容量为&lt;em&gt;V&lt;/em&gt;的包，从N件物体中选择若干件放进包里，使得包里物体的&lt;strong&gt;总价值最大&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;基本思路&quot;&gt;&lt;a href=&quot;#基本思路&quot; class=&quot;headerlink&quot; title=&quot;基本思路&quot;&gt;&lt;/a&gt;基本思路&lt;/h2&gt;&lt;p&gt;利用动态规划，建立&lt;code&gt;(N+1)*(V+1)&lt;/code&gt;的矩阵&lt;code&gt;F[N+1][V+1]&lt;/code&gt;，&lt;code&gt;F[i][j]&lt;/code&gt;表示在前i个物体中取若干个放入剩余容量为j的背包得到的最大的价值。于是有：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;F[i][j] = max(F[i-1][j], F[i-1][j-v[i]]+w[i])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是，矩阵第一行第一列为0，表示没有物体或者没有剩余空间时价值都是0。实际上&lt;code&gt;F[i-1][j]&lt;/code&gt;表示没有放进第i个物体，&lt;code&gt;F[i-1][j-v[i]]+w[i]&lt;/code&gt;表示放进了第i个物体时的价值。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;伪代码&quot;&gt;&lt;a href=&quot;#伪代码&quot; class=&quot;headerlink&quot; title=&quot;伪代码&quot;&gt;&lt;/a&gt;伪代码&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;F[0][] &amp;lt;- 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F[][0] &amp;lt;- 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for i = 1...N&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for j = 1...V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		F[i][j] = F[i - 1][j]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (j &amp;gt;= v[i]) //能放进第i个物体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			F[i][j] = max(F[i][j], F[i - 1][j - v[i]] + w[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F[N][V]即为所求&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h1 id=&quot;二维01背包问题&quot;&gt;&lt;a href=&quot;#二维01背包问题&quot; class=&quot;headerlink&quot; title=&quot;二维01背包问题&quot;&gt;&lt;/a&gt;二维01背包问题&lt;/h1&gt;&lt;p&gt;类似于01背包问题，有N件物体，消耗两种属性，背包也有两种待消耗属性。求总价值最大。&lt;/p&gt;
&lt;h2 id=&quot;伪代码-1&quot;&gt;&lt;a href=&quot;#伪代码-1&quot; class=&quot;headerlink&quot; title=&quot;伪代码&quot;&gt;&lt;/a&gt;伪代码&lt;/h2&gt;&lt;p&gt;类似于01背包问题，&lt;code&gt;c1&lt;/code&gt;, &lt;code&gt;c2&lt;/code&gt;是物体的两种属性，&lt;code&gt;v1&lt;/code&gt;和&lt;code&gt;v2&lt;/code&gt;是背包的两种属性。建立&lt;code&gt;F[v1+1][v2+1]&lt;/code&gt;，&lt;code&gt;F[i][j]&lt;/code&gt;表示背包两种属性为i和j时可放下的最大价值。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;F[0][0] = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for i = 1...N&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for j = v1...c1[i] // decrease&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		for k = v2...c2[i] // decrease&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			F[j][k] = max(F[j][k], F[j - c1[i]][k - c2[i]] + w[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://bailian.openjudge.cn/practice/4102/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;宠物小精灵之收服&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;描述&lt;/em&gt;&lt;br&gt;一天，小智和皮卡丘来到了小精灵狩猎场，里面有很多珍贵的野生宠物小精灵。小智也想收服其中的一些小精灵。然而，野生的小精灵并不那么容易被收服。对于每一个野生小精灵而言，小智可能需要使用很多个精灵球才能收服它，而在收服过程中，野生小精灵也会对皮卡丘造成一定的伤害（从而减少皮卡丘的体力）。当皮卡丘的体力小于等于0时，小智就必须结束狩猎（因为他需要给皮卡丘疗伤），而使得皮卡丘体力小于等于0的野生小精灵也不会被小智收服。当小智的精灵球用完时，狩猎也宣告结束。&lt;br&gt;我们假设小智遇到野生小精灵时有两个选择：收服它，或者离开它。如果小智选择了收服，那么一定会扔出能够收服该小精灵的精灵球，而皮卡丘也一定会受到相应的伤害；如果选择离开它，那么小智不会损失精灵球，皮卡丘也不会损失体力。&lt;br&gt;小智的目标有两个：主要目标是收服尽可能多的野生小精灵；如果可以收服的小精灵数量一样，小智希望皮卡丘受到的伤害越小（剩余体力越大），因为他们还要继续冒险。&lt;br&gt;现在已知小智的精灵球数量和皮卡丘的初始体力，已知每一个小精灵需要的用于收服的精灵球数目和它在被收服过程中会对皮卡丘造成的伤害数目。请问，小智该如何选择收服哪些小精灵以达到他的目标呢？&lt;/p&gt;
&lt;p&gt;&lt;em&gt;输入&lt;/em&gt;&lt;br&gt;输入数据的第一行包含三个整数：N(0 &amp;lt; N &amp;lt; 1000)，M(0 &amp;lt; M &amp;lt; 500)，K(0 &amp;lt; K &amp;lt; 100)，分别代表小智的精灵球数量、皮卡丘初始的体力值、野生小精灵的数量。&lt;br&gt;之后的K行，每一行代表一个野生小精灵，包括两个整数：收服该小精灵需要的精灵球的数量，以及收服过程中对皮卡丘造成的伤害。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;输出&lt;/em&gt;&lt;br&gt;输出为一行，包含两个整数：C，R，分别表示最多收服C个小精灵，以及收服C个小精灵时皮卡丘的剩余体力值最多为R。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; v1, v2, N;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c1[&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;], c2[&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;], f[&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; v1 &amp;gt;&amp;gt; v2 &amp;gt;&amp;gt; N;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= N; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; c1[i] &amp;gt;&amp;gt; c2[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	f[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= N; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = v1; j &amp;gt;= c1[i]; j--)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = v2; k &amp;gt;= c2[i]; k--)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             	f[j][k] = max(f[j][k], f[j - c1[i]][k - c2[i]] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt;= v2; k++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (f[v1][k] == f[v1][v2])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; f[v1][v2] &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; &amp;lt;&amp;lt; v2 - k &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         	&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;01背包问题&quot;&gt;&lt;a href=&quot;#01背包问题&quot; class=&quot;headerlink&quot; title=&quot;01背包问题&quot;&gt;&lt;/a&gt;01背包问题&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;有N件物体，体积为&lt;em&gt;v1、v2…vN&lt;/em&gt;，价值为&lt;em&gt;w1、w2…wN&lt;/em&gt;。&lt;br&gt;现在有一个容量为&lt;em&gt;V&lt;/em&gt;的包，从N件物体中选择若干件放进包里，使得包里物体的&lt;strong&gt;总价值最大&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;基本思路&quot;&gt;&lt;a href=&quot;#基本思路&quot; class=&quot;headerlink&quot; title=&quot;基本思路&quot;&gt;&lt;/a&gt;基本思路&lt;/h2&gt;&lt;p&gt;利用动态规划，建立&lt;code&gt;(N+1)*(V+1)&lt;/code&gt;的矩阵&lt;code&gt;F[N+1][V+1]&lt;/code&gt;，&lt;code&gt;F[i][j]&lt;/code&gt;表示在前i个物体中取若干个放入剩余容量为j的背包得到的最大的价值。于是有：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;F[i][j] = max(F[i-1][j], F[i-1][j-v[i]]+w[i])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是，矩阵第一行第一列为0，表示没有物体或者没有剩余空间时价值都是0。实际上&lt;code&gt;F[i-1][j]&lt;/code&gt;表示没有放进第i个物体，&lt;code&gt;F[i-1][j-v[i]]+w[i]&lt;/code&gt;表示放进了第i个物体时的价值。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
</feed>
